import { defineStore } from 'pinia';
import { pythonAPI } from '../api/pythonApi';
import websocketNotificationService from '../utils/websocketNotifications';

export const useAuthStore = defineStore('auth', {
  state: () => ({
    user: null,
    token: localStorage.getItem('auth_token') || null,
    userLimits: null,
  }),
  getters: {
    isAuthenticated: (state) => !!state.token && !!state.user,
    isAdmin: (state) => {
      if (!state.user) return false;
      return ['service_admin', 'group_admin', 'subgroup_admin'].includes(state.user.role);
    },
    isServiceAdmin: (state) => state.user?.role === 'service_admin',
    isGroupAdmin: (state) => state.user?.role === 'group_admin',
    isSubgroupAdmin: (state) => state.user?.role === 'subgroup_admin',
    availableByLimit: (state) => {
      if (!state.userLimits) return null;
      return state.userLimits.available_by_limit;
    },
  },
  actions: {
    async login(credentials) {
      try {
        const phone_e164 = credentials.phone_e164;
        const password = credentials.password;

        const response = await pythonAPI.login({ phone_e164, password });

        this.token = response.token;
        this.user = response.user; // –ë—ç–∫–µ–Ω–¥ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user –æ–±—ä–µ–∫—Ç
        localStorage.setItem('auth_token', response.token);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
        await this.fetchUserLimits();

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.log('üîå [AUTH] –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket')
        console.log('üîë [AUTH] User ID:', response.user?.user_id)
        websocketNotificationService.connect(response.token);

        return response;
      } catch (error) {
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        this.token = null;
        localStorage.removeItem('auth_token');
        this.user = null;
        this.userLimits = null;
        throw error;
      }
    },
    async register(data) {
      try {
        const response = await pythonAPI.register(data);

        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–æ–ª—å –Ω–∞ email
        // –∏ –¥–æ–ª–∂–µ–Ω –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        return response;
      } catch (error) {
        throw error;
      }
    },
    async fetchProfile() {
      try {
        if (!this.token) {
          return;
        }

        const response = await pythonAPI.getProfile();
        this.user = response.user;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–∞–∫–∂–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.fetchUserLimits();
      } catch (error) {
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        this.token = null;
        localStorage.removeItem('auth_token');
        this.user = null;
        this.userLimits = null;
        throw error;
      }
    },
    async fetchUserLimits() {
      try {
        if (!this.token) {
          return;
        }

        const response = await pythonAPI.getUserStationsAvailability();
        
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É {success: true, data: {user_limits: {...}}}
        if (response && response.data && response.data.user_limits) {
          this.userLimits = response.data.user_limits;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        this.userLimits = null;
      }
    },
    async logout() {
      try {
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç WebSocket
        websocketNotificationService.disconnect();
        
        // –î–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤ logout –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        // –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.token = null;
        this.user = null;
        this.userLimits = null;
        localStorage.removeItem('auth_token');
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
        const rememberMe = localStorage.getItem('remember_me') === 'true';
        if (!rememberMe) {
          localStorage.removeItem('saved_phone');
          localStorage.removeItem('saved_password');
          localStorage.removeItem('remember_me');
        }
      } catch (error) {
        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        websocketNotificationService.disconnect();
        
        this.token = null;
        this.user = null;
        this.userLimits = null;
        localStorage.removeItem('auth_token');
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
        const rememberMe = localStorage.getItem('remember_me') === 'true';
        if (!rememberMe) {
          localStorage.removeItem('saved_phone');
          localStorage.removeItem('saved_password');
          localStorage.removeItem('remember_me');
        }
      }
    },
    async initializeAuth() {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      if (this.token && !this.user) {
        try {
          await this.fetchProfile();
        } catch (error) {
          // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
          this.token = null;
          localStorage.removeItem('auth_token');
        }
      }
    },
  },
});
