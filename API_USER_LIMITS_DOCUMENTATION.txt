API ДОКУМЕНТАЦИЯ: УПРАВЛЕНИЕ ЛИМИТАМИ ПОЛЬЗОВАТЕЛЕЙ
========================================================

ОБЗОР
-----
API для работы с лимитами повербанков пользователей. Система поддерживает:
- Индивидуальные лимиты пользователей
- Лимиты групп по умолчанию
- Автоматическое определение эффективного лимита

ЛОГИКА РАБОТЫ ЛИМИТОВ
---------------------
Приоритет лимитов (от высшего к низшему):

1. ИНДИВИДУАЛЬНЫЙ ЛИМИТ - если у пользователя установлен индивидуальный лимит (powerbank_limit не NULL), 
   то используется именно он, независимо от лимита группы

2. ЛИМИТ ГРУППЫ - если индивидуального лимита нет (powerbank_limit = NULL), 
   но пользователь привязан к группе/подгруппе, то используется default_powerbank_limit группы

3. ЗАПРЕТ НА ВЗЯТИЕ - если ни индивидуального лимита, ни группы нет, 
   то пользователь не может брать повербанки (лимит = 0)

ВАЖНО: Индивидуальный лимит всегда имеет приоритет над групповым!

ПРОВЕРКА ЛИМИТОВ ПРИ ВЫДАЧЕ ПОВЕРБАНКОВ
=======================================

При выдаче повербанка система автоматически проверяет лимиты пользователя:

1. **Проверка лимита** - система определяет эффективный лимит пользователя:
   - Если у пользователя есть индивидуальный лимит - используется он
   - Если индивидуального лимита нет, но пользователь в группе - используется лимит группы
   - Если пользователь не в группе - лимит = 0 (запрет на выдачу)

2. **Подсчет активных повербанков** - система считает количество повербанков, которые пользователь уже взял и не вернул

**Что считается "активным повербанком":**
- Заказ со статусом `'borrow'` (выдача завершена успешно)
- Заказ НЕ завершен (`completed_at IS NULL`)

**Что НЕ считается активным:**
- Заказ со статусом `'return'` (повербанк возвращен)
- Заказ со статусом `'pending'` (выдача еще не завершена)
- Заказ с заполненным `completed_at` (операция завершена)

3. **Сравнение** - если количество активных повербанков >= эффективного лимита, выдача запрещается

**ПРИМЕРЫ:**
- Пользователь с лимитом 2 уже взял 2 повербанка → выдача запрещена (2 >= 2)
- Пользователь с лимитом 3 уже взял 2 повербанка → выдача разрешена (2 < 3)  
- Пользователь с лимитом 1 уже взял 1 повербанк → выдача запрещена (1 >= 1)
- Пользователь с лимитом 0 (не в группе) → выдача всегда запрещена

ОШИБКИ ПРИ ПРЕВЫШЕНИИ ЛИМИТА:
- "Превышен лимит повербанков (2/2). Источник: индивидуального лимита"
- "Превышен лимит повербанков (3/3). Источник: лимита группы"  
- "Пользователь не привязан к группе и не может брать повербанки"

ВАЖНО: Проверка лимитов происходит на сервере при каждом запросе на выдачу повербанка, независимо от фронтенда.


ENDPOINTS
=========

1. GET /api/users - Получить список пользователей
-------------------------------------------------

ОПИСАНИЕ: Возвращает список всех пользователей с информацией о лимитах

ЗАПРОС:
- Метод: GET
- URL: /api/users
- Параметры запроса (query parameters):
  * page (int, опционально) - номер страницы (по умолчанию: 1)
  * limit (int, опционально) - количество записей на странице (по умолчанию: 10)
  * status (string, опционально) - фильтр по статусу ('pending', 'active', 'blocked')

ОТВЕТ:
- Статус: 200 OK
- Content-Type: application/json

Пример ответа:
{
  "success": true,
  "data": [
    {
      "user_id": 17,
      "phone_e164": "+79032564698",
      "email": "leshkevich_a@mail.ru",
      "fio": "Andrew",
      "статус": "active",
      "created_at": "2025-10-01T11:33:12",
      "last_login_at": null,
      "role": "user",
      "parent_org_unit_id": null,
      "individual_limit": null,           // Индивидуальный лимит пользователя
      "group_default_limit": null,       // Лимит группы по умолчанию
      "group_name": null,                // Название группы
      "effective_limit": 0,              // Эффективный лимит (что фактически используется)
      "limit_type": "no_group"         // Тип лимита: 'individual', 'group', 'no_group'
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 6,
    "pages": 1
  }
}

НОВЫЕ ПОЛЯ В ОТВЕТЕ:
- individual_limit: int|null - индивидуальный лимит пользователя
- group_default_limit: int|null - лимит группы по умолчанию
- group_name: string|null - название группы пользователя
- effective_limit: int - фактически используемый лимит
- limit_type: string - тип лимита ('individual', 'group', 'no_group')


2. GET /api/users/{user_id} - Получить пользователя по ID
--------------------------------------------------------

ОПИСАНИЕ: Возвращает информацию о конкретном пользователе с лимитами

ЗАПРОС:
- Метод: GET
- URL: /api/users/{user_id}
- Параметры пути:
  * user_id (int) - ID пользователя

ОТВЕТ:
- Статус: 200 OK (успех) или 404 Not Found (пользователь не найден)
- Content-Type: application/json

Пример ответа (успех):
{
  "success": true,
  "data": {
    "user_id": 17,
    "phone_e164": "+79032564698",
    "email": "leshkevich_a@mail.ru",
    "fio": "Andrew",
    "статус": "active",
    "created_at": "2025-10-01T11:33:12",
    "last_login_at": null,
    "role": "user",
    "parent_org_unit_id": null,
    "individual_limit": null,
    "group_default_limit": null,
    "group_name": null,
    "effective_limit": 1,
    "limit_type": "default"
  }
}

Пример ответа (ошибка):
{
  "success": false,
  "error": "Пользователь не найден"
}


3. PUT /api/users/{user_id} - Обновить пользователя (расширенный)
----------------------------------------------------------------

ОПИСАНИЕ: Обновляет данные пользователя, включая лимит повербанков

ЗАПРОС:
- Метод: PUT
- URL: /api/users/{user_id}
- Content-Type: application/json
- Параметры пути:
  * user_id (int) - ID пользователя

Тело запроса (JSON):
{
  "fio": "Andrew Updated",
  "phone_e164": "+79032564698",
  "email": "leshkevich_a@mail.ru",
  "role": "user",
  "статус": "active",
  "parent_org_unit_id": 1,              // ID группы (опционально)
  "powerbank_limit": 5                   // НОВОЕ ПОЛЕ: индивидуальный лимит (опционально)
}

ОТВЕТ:
- Статус: 200 OK (успех) или 400 Bad Request (ошибка валидации) или 404 Not Found
- Content-Type: application/json

Пример ответа (успех):
{
  "success": true,
  "message": "Пользователь успешно обновлен",
  "data": {
    "user_id": 17,
    "fio": "Andrew Updated",
    "phone_e164": "+79032564698",
    "email": "leshkevich_a@mail.ru",
    "role": "user",
    "parent_org_unit_id": 1,
    "статус": "active"
  }
}

НОВОЕ ПОЛЕ В ЗАПРОСЕ:
- powerbank_limit: int|null - индивидуальный лимит повербанков
  * Если передать число - устанавливается индивидуальный лимит
  * Если передать null или не передавать - индивидуальный лимит сбрасывается

ВАЛИДАЦИЯ:
- powerbank_limit должен быть числом >= 0 или null
- Если передать null - индивидуальный лимит сбрасывается, будет использоваться лимит группы или по умолчанию

Примеры запросов:

1. Установить индивидуальный лимит (будет использоваться вместо лимита группы):
{
  "fio": "Новое имя",
  "phone_e164": "+79032564698",
  "email": "email@example.com",
  "role": "user",
  "статус": "active",
  "powerbank_limit": 5
}

2. Сбросить индивидуальный лимит (будет использоваться лимит группы):
{
  "fio": "Новое имя",
  "phone_e164": "+79032564698",
  "email": "email@example.com",
  "role": "user",
  "статус": "active",
  "powerbank_limit": null
}

3. Установить лимит 0 (запретить брать повербанки):
{
  "fio": "Новое имя",
  "phone_e164": "+79032564698",
  "email": "email@example.com",
  "role": "user",
  "статус": "active",
  "powerbank_limit": 0
}

ПРИМЕРЫ РАБОТЫ ЛИМИТОВ:
- Пользователь с powerbank_limit = 3 и группой с default_powerbank_limit = 5 → эффективный лимит = 3
- Пользователь с powerbank_limit = NULL и группой с default_powerbank_limit = 5 → эффективный лимит = 5  
- Пользователь с powerbank_limit = NULL и без группы → эффективный лимит = 0 (не может брать повербанки)

ПРИМЕРЫ ПРОВЕРКИ ПРИ ВЫДАЧЕ:
- Лимит = 2, активных повербанков = 0 → можно взять (0 < 2)
- Лимит = 2, активных повербанков = 1 → можно взять (1 < 2)  
- Лимит = 2, активных повербанков = 2 → нельзя взять (2 >= 2)
- Лимит = 0 → нельзя взять (пользователь не в группе)

**ПРИМЕРЫ СТАТУСОВ ЗАКАЗОВ:**
- `status = 'borrow', completed_at = NULL` → активный повербанк (учитывается в лимите)
- `status = 'return', completed_at = NULL` → повербанк возвращен (НЕ учитывается в лимите)
- `status = 'pending', completed_at = NULL` → выдача в процессе (НЕ учитывается в лимите)
- `status = 'borrow', completed_at = '2025-01-15 10:30:00'` → операция завершена (НЕ учитывается в лимите)


ОБРАБОТКА ОШИБОК
===============

Все endpoints возвращают стандартные HTTP статус коды:

- 200 OK - успешное выполнение
- 400 Bad Request - ошибка валидации данных
- 404 Not Found - пользователь не найден
- 500 Internal Server Error - внутренняя ошибка сервера

Примеры ошибок:

1. Некорректный ID пользователя:
{
  "success": false,
  "error": "Некорректный ID пользователя"
}

2. Отрицательный лимит:
{
  "success": false,
  "error": "Лимит повербанков не может быть отрицательным"
}

3. Некорректный тип данных:
{
  "success": false,
  "error": "Лимит повербанков должен быть числом"
}

4. Пользователь не найден:
{
  "success": false,
  "error": "Пользователь не найден"
}


ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ ДЛЯ ФРОНТЕНДА
==================================

1. Получить список пользователей с лимитами:
```javascript
const response = await fetch('/api/users?page=1&limit=20');
const data = await response.json();

if (data.success) {
  data.data.forEach(user => {
    console.log(`Пользователь ${user.fio}: лимит ${user.effective_limit} (${user.limit_type})`);
    
    // Отображаем статус лимита
    if (user.effective_limit === 0) {
      console.log('❌ Запрещено брать повербанки (не в группе)');
    } else {
      console.log(`✅ Может брать до ${user.effective_limit} повербанков`);
    }
  });
}
```

2. Проверить лимит перед выдачей повербанка:
```javascript
// Фронтенд может предварительно проверить лимит пользователя
const checkUserLimit = async (userId) => {
  const response = await fetch(`/api/users/${userId}`);
  const data = await response.json();
  
  if (data.success) {
    const user = data.data;
    
    // Если лимит = 0, показываем предупреждение
    if (user.effective_limit === 0) {
      alert('Пользователь не может брать повербанки (не привязан к группе)');
      return false;
    }
    
    // Можно показать текущий статус лимита
    console.log(`Лимит: ${user.effective_limit} (${user.limit_type})`);
    return true;
  }
  
  return false;
};

// Использование перед выдачей
const canBorrow = await checkUserLimit(userId);
if (!canBorrow) {
  return; // Прекращаем операцию
}
```

3. Обновить лимит пользователя:
```javascript
// Установить индивидуальный лимит
const response = await fetch(`/api/users/${userId}`, {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    fio: "Новое имя",
    phone_e164: "+79032564698",
    email: "email@example.com",
    role: "user",
    "статус": "active",
    powerbank_limit: 3  // Устанавливаем индивидуальный лимит
  })
});

// Сбросить индивидуальный лимит (будет использоваться лимит группы)
const response2 = await fetch(`/api/users/${userId}`, {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    fio: "Новое имя",
    phone_e164: "+79032564698",
    email: "email@example.com",
    role: "user",
    "статус": "active",
    powerbank_limit: null  // Сбрасываем индивидуальный лимит
  })
});
```

4. Обработка ошибок при выдаче повербанка:
```javascript
const borrowPowerbank = async (powerbankId, userId) => {
  try {
    const response = await fetch(`/api/borrow/powerbanks/${powerbankId}/request`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        user_id: userId
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      console.log('Повербанк успешно выдан');
    } else {
      // Обрабатываем ошибки лимитов
      if (result.error.includes('Превышен лимит')) {
        alert(`❌ ${result.error}`);
        // Можно показать детальную информацию о лимите
        showLimitDetails(userId);
      } else if (result.error.includes('не привязан к группе')) {
        alert('❌ Пользователь не может брать повербанки (не в группе)');
      } else {
        alert(`❌ Ошибка: ${result.error}`);
      }
    }
  } catch (error) {
    console.error('Ошибка при выдаче повербанка:', error);
  }
};
```

5. Отображение информации о лимитах в UI:
```javascript
const renderUserLimitInfo = (user) => {
  const limitInfo = document.getElementById('limit-info');
  
  if (user.effective_limit === 0) {
    limitInfo.innerHTML = `
      <div class="limit-status no-group">
        <span class="icon">🚫</span>
        <span class="text">Запрещено (не в группе)</span>
      </div>
    `;
  } else {
    const limitTypeText = user.limit_type === 'individual' 
      ? 'Индивидуальный лимит' 
      : `Лимит группы: ${user.group_name || 'Неизвестная группа'}`;
      
    limitInfo.innerHTML = `
      <div class="limit-status ${user.limit_type}">
        <span class="icon">${user.limit_type === 'individual' ? '👤' : '🏢'}</span>
        <span class="text">${user.effective_limit} повербанков</span>
        <span class="source">(${limitTypeText})</span>
      </div>
    `;
  }
};
```

ОТОБРАЖЕНИЕ НА ФРОНТЕНДЕ
========================

Рекомендуется отображать информацию о лимитах следующим образом:

1. В списке пользователей показывать:
   - Эффективный лимит (effective_limit)
   - Тип лимита с пояснением:
     * "Индивидуальный" для limit_type = 'individual'
     * "Группы: [название группы]" для limit_type = 'group'
     * "Запрещено (не в группе)" для limit_type = 'no_group'

2. В форме редактирования пользователя:
   - Поле для индивидуального лимита
   - Информация о текущем лимите группы (если есть)
   - Кнопка "Сбросить к лимиту группы" (устанавливает powerbank_limit в null)
   - Пояснение: "Если установлен индивидуальный лимит, он будет использоваться вместо лимита группы"

3. Индикаторы:
   - Зеленый - индивидуальный лимит установлен
   - Синий - используется лимит группы
   - Красный - запрещено (не в группе)
