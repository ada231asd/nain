API ДЛЯ ПАКЕТНОГО ИМПОРТА ПОЛЬЗОВАТЕЛЕЙ
=====================================

ОПИСАНИЕ
--------
API для пакетного импорта пользователей из Excel файлов. Позволяет загружать файлы с данными пользователей,
автоматически создавать аккаунты, генерировать пароли и отправлять их на email.

ОСОБЕННОСТИ
-----------
- Поддержка форматов Excel (.xlsx, .xls)
- Автоматическая валидация данных
- Проверка на существующих пользователей
- Автоматическая генерация паролей
- Отправка паролей на email
- Привязка к группам/подгруппам
- Подробная отчетность об ошибках

ФОРМАТ EXCEL ФАЙЛА
------------------
Файл должен содержать следующие колонки:

| Колонка | Описание | Обязательная | Пример |
|---------|----------|--------------|--------|
| fio | ФИО пользователя | Да | "Иванов Иван Иванович" |
| email | Email адрес | Да | "ivanov@example.com" |
| phone | Номер телефона | Да | "+79012345678" или "89012345678" |

ВАЛИДАЦИЯ ДАННЫХ
----------------
- **ФИО**: Должно содержать минимум 2 слова, каждое слово минимум 2 символа
- **Email**: Должен соответствовать стандартному формату email
- **Телефон**: Поддерживаются форматы:
  - E164: +79012345678
  - Российский с 8: 89012345678
  - Российский с 7: 79012345678

ENDPOINTS
=========

1. POST /api/users/bulk-import - Импорт пользователей из Excel файла
------------------------------------------------------------------

ОПИСАНИЕ: Загружает Excel файл и создает пользователей в системе

ЗАПРОС:
- Метод: POST
- URL: /api/users/bulk-import
- Content-Type: multipart/form-data

Параметры формы:
- file (file, обязательный) - Excel файл с данными пользователей
- org_unit_id (int, опционально) - ID группы для привязки пользователей

ОТВЕТ:
- Статус: 200 OK (успех) или 400 Bad Request (ошибка валидации) или 500 Internal Server Error
- Content-Type: application/json

Пример ответа (успех):
{
  "success": true,
  "message": "Импорт завершен. Создано пользователей: 5, пропущено существующих: 2, ошибок: 1",
  "created_users": [
    {
      "user_id": 123,
      "fio": "Иванов Иван Иванович",
      "email": "ivanov@example.com",
      "phone_e164": "+79012345678",
      "password": "Abc123Xy",
      "email_sent": true,
      "row_number": 2
    }
  ],
  "errors": [
    "Строка 5: Некорректный email 'invalid-email'"
  ],
  "statistics": {
    "total_parsed": 8,
    "valid_users": 7,
    "existing_users": 2,
    "created_users": 5,
    "errors": 1
  }
}

Пример ответа (ошибка):
{
  "success": false,
  "message": "Не найдено валидных пользователей для импорта",
  "errors": [
    "Отсутствуют обязательные колонки: fio, email",
    "Строка 2: Некорректный телефон '123'"
  ],
  "statistics": {
    "total_parsed": 0,
    "valid_users": 0,
    "existing_users": 0,
    "created_users": 0,
    "errors": 2
  }
}

ОШИБКИ:
- 400: "Отсутствует файл для импорта"
- 400: "Неподдерживаемый формат файла. Разрешены: .xlsx, .xls"
- 400: "Файл слишком большой. Максимальный размер: 10MB"
- 400: "org_unit_id должен быть числом"

2. GET /api/users/bulk-import/template - Получить шаблон Excel файла
-------------------------------------------------------------------

ОПИСАНИЕ: Скачивает шаблон Excel файла с примером данных

ЗАПРОС:
- Метод: GET
- URL: /api/users/bulk-import/template

ОТВЕТ:
- Статус: 200 OK
- Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
- Content-Disposition: attachment; filename="users_import_template.xlsx"

Файл содержит:
- Заголовки колонок: fio, email, phone
- Примеры данных в правильном формате
- Правильно настроенную ширину колонок

3. POST /api/users/bulk-import/validate - Валидация Excel файла
--------------------------------------------------------------

ОПИСАНИЕ: Проверяет Excel файл на ошибки без создания пользователей

ЗАПРОС:
- Метод: POST
- URL: /api/users/bulk-import/validate
- Content-Type: multipart/form-data

Параметры формы:
- file (file, обязательный) - Excel файл для валидации

ОТВЕТ:
- Статус: 200 OK (успех) или 400 Bad Request (ошибка валидации)
- Content-Type: application/json

Пример ответа (успех):
{
  "success": true,
  "message": "Валидация завершена. Найдено 5 валидных пользователей",
  "errors": [],
  "statistics": {
    "total_rows": 5,
    "valid_users": 5,
    "new_users": 5,
    "existing_users": 0,
    "errors": 0
  },
  "preview_users": [
    {
      "fio": "Иванов Иван Иванович",
      "email": "ivanov@example.com",
      "phone_e164": "+79012345678",
      "row_number": 2
    }
  ]
}

Пример ответа (с ошибками):
{
  "success": false,
  "message": "Валидация завершена. Найдено 3 валидных пользователей, 2 уже существуют, 1 с ошибками",
  "errors": [
    "Строка 4: Пользователь с телефоном +79012345678 уже существует",
    "Строка 6: Некорректный email 'invalid-email'"
  ],
  "statistics": {
    "total_rows": 6,
    "valid_users": 5,
    "new_users": 3,
    "existing_users": 2,
    "errors": 2
  },
  "preview_users": [
    {
      "fio": "Петров Петр Петрович",
      "email": "petrov@example.com",
      "phone_e164": "+79098765432",
      "row_number": 3
    }
  ]
}

ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ ДЛЯ ФРОНТЕНДА
==================================

1. Скачивание шаблона:
```javascript
const downloadTemplate = async () => {
  try {
    const response = await fetch('/api/users/bulk-import/template');
    
    if (response.ok) {
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'users_import_template.xlsx';
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } else {
      console.error('Ошибка скачивания шаблона');
    }
  } catch (error) {
    console.error('Ошибка:', error);
  }
};
```

2. Валидация файла перед импортом:
```javascript
const validateFile = async (file) => {
  const formData = new FormData();
  formData.append('file', file);
  
  try {
    const response = await fetch('/api/users/bulk-import/validate', {
      method: 'POST',
      body: formData
    });
    
    const result = await response.json();
    
    if (result.success) {
      console.log(`✅ Файл валиден. Найдено ${result.statistics.valid_users} пользователей`);
      return true;
    } else {
      console.log(`❌ Ошибки валидации:`, result.errors);
      return false;
    }
  } catch (error) {
    console.error('Ошибка валидации:', error);
    return false;
  }
};
```

3. Импорт пользователей:
```javascript
const importUsers = async (file, orgUnitId = null) => {
  const formData = new FormData();
  formData.append('file', file);
  
  if (orgUnitId) {
    formData.append('org_unit_id', orgUnitId);
  }
  
  try {
    const response = await fetch('/api/users/bulk-import', {
      method: 'POST',
      body: formData
    });
    
    const result = await response.json();
    
    if (result.success) {
      console.log(`✅ Импорт успешен: ${result.message}`);
      console.log(`Создано пользователей: ${result.statistics.created_users}`);
      
      // Показываем созданных пользователей
      result.created_users.forEach(user => {
        console.log(`- ${user.fio} (${user.email}) - пароль отправлен: ${user.email_sent ? 'да' : 'нет'}`);
      });
      
      return result;
    } else {
      console.log(`❌ Ошибки импорта:`, result.errors);
      return result;
    }
  } catch (error) {
    console.error('Ошибка импорта:', error);
    return null;
  }
};
```

4. Полный процесс импорта с UI:
```javascript
const handleFileImport = async (file, orgUnitId) => {
  // Показываем индикатор загрузки
  showLoadingIndicator();
  
  try {
    // 1. Валидируем файл
    const isValid = await validateFile(file);
    if (!isValid) {
      hideLoadingIndicator();
      showError('Файл содержит ошибки. Исправьте их перед импортом.');
      return;
    }
    
    // 2. Импортируем пользователей
    const result = await importUsers(file, orgUnitId);
    
    hideLoadingIndicator();
    
    if (result && result.success) {
      showSuccess(`Импорт завершен! Создано пользователей: ${result.statistics.created_users}`);
      
      // Показываем детальную статистику
      showImportResults(result);
    } else {
      showError('Ошибка импорта пользователей');
    }
    
  } catch (error) {
    hideLoadingIndicator();
    showError('Произошла ошибка при импорте');
    console.error(error);
  }
};

const showImportResults = (result) => {
  const stats = result.statistics;
  
  const message = `
    📊 Результаты импорта:
    
    ✅ Создано пользователей: ${stats.created_users}
    ⚠️ Пропущено существующих: ${stats.existing_users}
    ❌ Ошибок: ${stats.errors}
    
    ${result.errors.length > 0 ? `
    Ошибки:
    ${result.errors.map(error => `• ${error}`).join('\n')}
    ` : ''}
  `;
  
  alert(message);
};
```

5. Drag & Drop загрузка файла:
```html
<div id="file-drop-zone" class="drop-zone">
  <p>Перетащите Excel файл сюда или нажмите для выбора</p>
  <input type="file" id="file-input" accept=".xlsx,.xls" style="display: none;">
</div>

<script>
const dropZone = document.getElementById('file-drop-zone');
const fileInput = document.getElementById('file-input');

dropZone.addEventListener('click', () => fileInput.click());
dropZone.addEventListener('dragover', (e) => {
  e.preventDefault();
  dropZone.classList.add('drag-over');
});

dropZone.addEventListener('dragleave', () => {
  dropZone.classList.remove('drag-over');
});

dropZone.addEventListener('drop', (e) => {
  e.preventDefault();
  dropZone.classList.remove('drag-over');
  
  const files = e.dataTransfer.files;
  if (files.length > 0) {
    const file = files[0];
    if (file.name.match(/\.(xlsx|xls)$/i)) {
      handleFileImport(file);
    } else {
      alert('Пожалуйста, выберите Excel файл (.xlsx или .xls)');
    }
  }
});

fileInput.addEventListener('change', (e) => {
  const file = e.target.files[0];
  if (file) {
    handleFileImport(file);
  }
});
</script>
```

ОБРАБОТКА ОШИБОК
================

1. Проверка размера файла:
```javascript
const checkFileSize = (file) => {
  const maxSize = 10 * 1024 * 1024; // 10MB
  if (file.size > maxSize) {
    alert(`Файл слишком большой. Максимальный размер: ${maxSize / (1024*1024)}MB`);
    return false;
  }
  return true;
};
```

2. Проверка типа файла:
```javascript
const checkFileType = (file) => {
  const allowedTypes = ['.xlsx', '.xls'];
  const fileExtension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));
  
  if (!allowedTypes.includes(fileExtension)) {
    alert(`Неподдерживаемый формат файла. Разрешены: ${allowedTypes.join(', ')}`);
    return false;
  }
  return true;
};
```

3. Обработка ошибок сети:
```javascript
const importWithRetry = async (file, orgUnitId, maxRetries = 3) => {
  for (let i = 0; i < maxRetries; i++) {
    try {
      const result = await importUsers(file, orgUnitId);
      return result;
    } catch (error) {
      if (i === maxRetries - 1) {
        throw error;
      }
      
      console.log(`Попытка ${i + 1} не удалась, повторяем через 2 секунды...`);
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
};
```

ВАЖНЫЕ ЗАМЕЧАНИЯ
================

1. **Размер файла**: Максимальный размер файла ограничен 10MB для обеспечения производительности.

2. **Формат телефонов**: Система автоматически нормализует российские номера в формат E164.

3. **Дублирование**: Система проверяет существующих пользователей по телефону и email.

4. **Email уведомления**: Пароли отправляются автоматически на указанные email адреса.

5. **Группы**: Пользователи могут быть привязаны к конкретной группе при импорте.

6. **Транзакции**: Все операции выполняются в транзакциях для обеспечения целостности данных.

7. **Логирование**: Все операции импорта подробно логируются для аудита.

8. **Производительность**: Для больших файлов рекомендуется использовать валидацию перед импортом.

ПРИМЕР EXCEL ФАЙЛА
==================

| fio | email | phone |
|-----|-------|-------|
| Иванов Иван Иванович | ivanov@example.com | +79012345678 |
| Петрова Мария Сергеевна | petrova@example.com | 89098765432 |
| Сидоров Алексей Владимирович | sidorov@example.com | 79055555555 |

Примечания:
- Телефоны могут быть в любом из поддерживаемых форматов
- ФИО должно содержать минимум 2 слова
- Email должен быть валидным
- Пустые строки игнорируются
