#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –ø–∞–∫–µ—Ç–æ–≤
"""

import os
import json
import sys
from datetime import datetime
from typing import List, Dict, Any

def view_logs(log_dir: str = "logs", log_type: str = "human", limit: int = 50):
    """
    –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ª–æ–≥–∏ –ø–∞–∫–µ—Ç–æ–≤
    
    Args:
        log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏
        log_type: –¢–∏–ø –ª–æ–≥–æ–≤ ('human', 'incoming', 'outgoing')
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞
    """
    
    if not os.path.exists(log_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {log_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
    log_files = []
    for file in os.listdir(log_dir):
        if file.startswith(f"packets_{log_type}") and file.endswith(".log"):
            log_files.append(os.path.join(log_dir, file))
    
    if not log_files:
        print(f"‚ùå –§–∞–π–ª—ã –ª–æ–≥–æ–≤ —Ç–∏–ø–∞ '{log_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ {log_dir}:")
        for file in os.listdir(log_dir):
            if file.endswith(".log"):
                print(f"  - {file}")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    log_files.sort(reverse=True)
    
    print(f"üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ç–∏–ø–∞ '{log_type}' (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} –∑–∞–ø–∏—Å–µ–π)")
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {log_dir}")
    print("=" * 80)
    
    total_entries = 0
    
    for log_file in log_files:
        if total_entries >= limit:
            break
            
        print(f"\nüìÑ –§–∞–π–ª: {os.path.basename(log_file)}")
        print("-" * 40)
        
        try:
            with open(log_file, "r", encoding="utf-8") as f:
                if log_type == "human":
                    # –î–ª—è —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã—Ö –ª–æ–≥–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    content = f.read()
                    lines = content.split('\n')
                    for line in lines[-limit*20:]:  # –ü—Ä–∏–º–µ—Ä–Ω–æ 20 —Å—Ç—Ä–æ–∫ –Ω–∞ –∑–∞–ø–∏—Å—å
                        if line.strip():
                            print(line)
                else:
                    # –î–ª—è JSON –ª–æ–≥–æ–≤ –ø–∞—Ä—Å–∏–º –∏ –≤—ã–≤–æ–¥–∏–º
                    entries = []
                    current_entry = ""
                    for line in f:
                        if line.strip() == "-" * 80:
                            if current_entry.strip():
                                try:
                                    entry = json.loads(current_entry)
                                    entries.append(entry)
                                except json.JSONDecodeError:
                                    pass
                            current_entry = ""
                        else:
                            current_entry += line
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                    for entry in entries[-limit:]:
                        total_entries += 1
                        if total_entries > limit:
                            break
                            
                        print(f"\nüïê {entry.get('timestamp', 'Unknown time')}")
                        print(f"üì§ {entry.get('direction', 'Unknown').upper()}")
                        print(f"üîß {entry.get('command_name', 'Unknown')} ({entry.get('command', 'Unknown')})")
                        print(f"üìè {entry.get('size', 0)} –±–∞–π—Ç")
                        
                        station_info = entry.get('station_info', {})
                        if station_info:
                            print(f"üè¢ –°—Ç–∞–Ω—Ü–∏—è: {station_info.get('box_id', 'unknown')} (ID: {station_info.get('station_id', 'unknown')})")
                        
                        print(f"üî¢ HEX: {entry.get('hex_data', 'Unknown')[:50]}{'...' if len(entry.get('hex_data', '')) > 50 else ''}")
                        
                        parsed_data = entry.get('parsed_data', {})
                        if parsed_data and len(parsed_data) > 0:
                            print("üìã –î–∞–Ω–Ω—ã–µ:")
                            for key, value in parsed_data.items():
                                if key not in ['RawPacket', 'ReceivedAt'] and value is not None:
                                    print(f"   {key}: {value}")
                        
                        print("-" * 40)
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {log_file}: {e}")
    
    print(f"\n‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ {total_entries} –∑–∞–ø–∏—Å–µ–π")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        log_type = sys.argv[1]
    else:
        log_type = "human"
    
    if len(sys.argv) > 2:
        try:
            limit = int(sys.argv[2])
        except ValueError:
            limit = 50
    else:
        limit = 50
    
    print("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø–∞–∫–µ—Ç–æ–≤")
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python view_logs.py [—Ç–∏–ø] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")
    print("–¢–∏–ø—ã: human, incoming, outgoing")
    print("–ü—Ä–∏–º–µ—Ä: python view_logs.py human 20")
    print()
    
    view_logs("logs", log_type, limit)

if __name__ == "__main__":
    main()
