"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å TCP –∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞–º–∏
"""
import asyncio
import hashlib
import signal
import sys
import platform
from typing import Optional

import aiomysql
from aiohttp import web

from config.settings import SERVER_IP, TCP_PORTS, HTTP_PORT, DB_CONFIG, CONNECTION_TIMEOUT, MAX_PACKET_SIZE
from models.connection import ConnectionManager, StationConnection
from models.station import Station
from handlers.station_handler import StationHandler
from handlers.borrow_powerbank import BorrowPowerbankHandler
from handlers.return_powerbank import ReturnPowerbankHandler
from handlers.eject_powerbank import EjectPowerbankHandler
from handlers.query_iccid import QueryICCIDHandler
from handlers.slot_abnormal_report import SlotAbnormalReportHandler
from handlers.restart_cabinet import RestartCabinetHandler
from handlers.query_inventory import QueryInventoryHandler
from handlers.query_voice_volume import QueryVoiceVolumeHandler
from handlers.set_voice_volume import SetVoiceVolumeHandler
from handlers.set_server_address import SetServerAddressHandler
from handlers.query_server_address import QueryServerAddressHandler
from http_server import HTTPServer
from utils.packet_utils import parse_packet
from utils.station_resolver import StationResolver
from utils.centralized_logger import get_logger, close_logger, get_logger_stats
from utils.tcp_packet_logger import close_tcp_logger, get_tcp_logger_stats



class OptimizedServer:
   
    
    def __init__(self):
        self.db_pool: Optional[aiomysql.Pool] = None
        self.connection_manager = ConnectionManager()
        self.station_resolver = StationResolver(self.connection_manager)
        self.logger = get_logger('server')
        self.station_handler: Optional[StationHandler] = None
        self.borrow_handler: Optional[BorrowPowerbankHandler] = None
        self.return_handler: Optional[ReturnPowerbankHandler] = None
        self.eject_handler: Optional[EjectPowerbankHandler] = None
        self.query_iccid_handler: Optional[QueryICCIDHandler] = None
        self.slot_abnormal_report_handler: Optional[SlotAbnormalReportHandler] = None
        self.restart_cabinet_handler: Optional[RestartCabinetHandler] = None
        self.query_inventory_handler: Optional[QueryInventoryHandler] = None
        self.query_voice_volume_handler: Optional[QueryVoiceVolumeHandler] = None
        self.set_voice_volume_handler: Optional[SetVoiceVolumeHandler] = None
        self.set_server_address_handler: Optional[SetServerAddressHandler] = None
        self.query_server_address_handler: Optional[QueryServerAddressHandler] = None
        self.tcp_servers: list[asyncio.Server] = []
        self.http_server: Optional[HTTPServer] = None
        self.running = False
        
    
    async def initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.db_pool = await aiomysql.create_pool(**DB_CONFIG)
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞: {e}")
            sys.exit(1)
    
    async def cleanup_database(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.db_pool:
            self.db_pool.close()
            await self.db_pool.wait_closed()
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def send_command_to_station(self, command_bytes: bytes, connection, station_info: dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        try:
            if connection.writer and not connection.writer.is_closing():
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—É—é –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é
                from utils.packet_utils import log_packet
                log_packet(command_bytes, "OUTGOING", connection.box_id or "unknown", "Command")
                connection.writer.write(command_bytes)
                await connection.writer.drain()
                return True
            else:
                self.logger.error(f"TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç–∞–Ω—Ü–∏–µ–π {connection.box_id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (writer –∑–∞–∫—Ä—ã—Ç)")
                return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id}: {e}")
            return False

    async def _validate_packet(self, data: bytes, connection: StationConnection) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É: checksum –∏ token"""
        try:
            packet_data_len = int.from_bytes(data[0:2], byteorder='big')
            

            if len(data) < 2 + packet_data_len:
                return False

            command = data[2]
            vsn = data[3]
            checksum = data[4]
            token = data[5:9]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º payload (–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ç–æ–∫–µ–Ω–∞)
            payload_start = 9
            payload_end = 2 + packet_data_len
            payload = data[payload_start:payload_end] if payload_end > payload_start else b''
            
        
            if command != 0x60:  
                calculated_checksum = 0
                for byte in payload:
                    calculated_checksum ^= byte
                    
                if checksum != calculated_checksum:
                    print(f"–ù–µ–≤–µ—Ä–Ω–∞—è checksum: –ø–æ–ª—É—á–µ–Ω–æ 0x{checksum:02X}, –æ–∂–∏–¥–∞–ª–æ—Å—å 0x{calculated_checksum:02X}")
                    return False
            
       
            if command != 0x60:  
                if not await self._validate_token(connection, payload, token):
                    print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 0x{command:02X}")
                    return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞: {e}")
            return False

    async def _validate_token(self, connection: StationConnection, payload: bytes, received_token: bytes) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É MD5(payload + SecretKey)"""
        try:
            if not connection.box_id:
                return False
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            secret_key = await self._get_secret_key_for_station(connection.box_id)
            if not secret_key:
                print(f"–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id}")
                return False
            
          
            from utils.packet_utils import generate_session_token
            expected_token_int = generate_session_token(payload, secret_key)
            expected_token = expected_token_int.to_bytes(4, byteorder='big')
            
            return received_token == expected_token
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False

    async def _get_secret_key_for_station(self, box_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.db_pool:
                return None
                
            async with self.db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    
                    await cur.execute("""
                        SELECT ssk.key_value 
                        FROM station_secret_key ssk
                        JOIN station s ON ssk.station_id = s.station_id
                        WHERE s.box_id = %s
                    """, (box_id,))
                    result = await cur.fetchone()
                    return result[0] if result else None
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
            return None

    async def _process_packet_data(self, data: bytes, connection: StationConnection, writer):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞ (–≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)"""
        try:
            command = data[2]
            response = None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            command_names = {
                0x60: "Login", 0x61: "Heartbeat", 0x63: "SetServerAddress",
                0x64: "QueryInventory", 0x65: "BorrowPowerBank", 0x66: "ReturnPowerBank",
                0x67: "RestartCabinet", 0x69: "QueryICCID", 0x6A: "QueryServerAddress", 
                0x70: "SetVoiceVolume", 0x77: "QueryVoiceVolume", 0x80: "ForceEject",
                0x83: "SlotAbnormalReport"
            }
            command_name = command_names.get(command, f"Unknown(0x{command:02X})")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if command != 0x61:  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º heartbeat
                print(f"üì¶ –ü–∞–∫–µ—Ç {command_name} –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç
            from utils.packet_utils import log_packet
            log_packet(data, "INCOMING", connection.box_id or "unknown", command_name)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if command == 0x60:  # Login
                if not self.station_handler:
                    self.logger.error("StationHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
                    return False
                response = await self.station_handler.handle_login(data, connection)
                if response is None:
                    return True  # signal to close connection
                else:
                    try:
                        writer.write(response)
                        await writer.drain()
                        print(f"‚úÖ –û—Ç–≤–µ—Ç Login –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id}")
                        response = None  # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Login –æ—Ç–≤–µ—Ç–∞: {e}")
                        return True  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            
            elif command == 0x61:  # Heartbeat
                response = await self.station_handler.handle_heartbeat(data, connection)
                if response:
                    try:
                        writer.write(response)
                        await writer.drain()
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ heartbeat –æ—Ç–≤–µ—Ç–∞: {e}")
                    response = None
                else:
                    self.logger.warning(f"Heartbeat –æ—Ç–≤–µ—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id}")
            
            elif command == 0x65:  # Borrow Power Bank
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç
                if len(data) >= 8:
                    if len(data) >= 12:
                        # –≠—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –≤—ã–¥–∞—á—É
                        await self.borrow_handler.handle_borrow_response(data, connection)
                    else:
                        # –≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É
                        response = await self.borrow_handler.handle_borrow_request(data, connection)
                        if response:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é
                            writer.write(response)
                            await writer.drain()
                return False
            
            elif command == 0x66:  # Return Power Bank
                if len(data) >= 21:  # –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
                    await self.return_handler.handle_return_response(data, connection)
                else:  # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
                    response = await self.return_handler.handle_return_request(data, connection)
                    if response:
                        writer.write(response)
                        await writer.drain()
                return False
            
            elif command == 0x80:  # Force Eject Power Bank
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
                await self.eject_handler.handle_force_eject_response(data, connection)
                return False
            
            elif command == 0x69:  # Query ICCID
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å ICCID
                iccid_result = await self.query_iccid_handler.handle_query_iccid_response(data, connection)
                return False
            
            elif command == 0x83:  # Slot Status Abnormal Report
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –∞–Ω–æ–º–∞–ª–∏–∏ —Å–ª–æ—Ç–∞
                abnormal_response = await self.slot_abnormal_report_handler.handle_slot_abnormal_report_request(data, connection)
                if abnormal_response:
                    writer.write(abnormal_response)
                    await writer.drain()
                return False
            
            elif command == 0x67:  # Restart Cabinet Response
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–±–∏–Ω–µ—Ç–∞
                await self.restart_cabinet_handler.handle_restart_response(data, connection)
                return False
            
            elif command == 0x64:  # Query Inventory Response
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                await self.query_inventory_handler.handle_inventory_response(data, connection)
                return False
            
            elif command == 0x77:  # Query Voice Volume Response
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                await self.query_voice_volume_handler.handle_voice_volume_response(data, connection)
                return False
            
            elif command == 0x70:  # Set Voice Volume Response
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                await self.set_voice_volume_handler.handle_set_voice_volume_response(data, connection)
                return False
            
            elif command == 0x63:  # Set Server Address Response
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
                await self.set_server_address_handler.handle_set_server_address_response(data, connection)
                return False
            
            elif command == 0x6A:  # Query Server Address Response
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
                await self.query_server_address_handler.handle_query_server_address_response(data, connection)
                return False
            
            else:
                self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ 0x{command:02X} –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id}")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (heartbeat —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ)
            if response and command != 0x61:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ writer –∏ connection.fd
                writer_fd = writer.transport.get_extra_info('socket').fileno()
                if writer_fd != connection.fd:
                    self.logger.error(f"–ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: writer fd={writer_fd}, connection fd={connection.fd}")
                
                log_packet(response, "OUTGOING", connection.box_id or "unknown", f"{command_name}Response")
                writer.write(response)
                await writer.drain()
                print(f"‚úÖ –û—Ç–≤–µ—Ç {command_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id}")
            
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞: {e}")
            return False

    async def handle_client(self, reader: asyncio.StreamReader, writer: asyncio.StreamWriter):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        fd = writer.transport.get_extra_info('socket').fileno()
        addr = writer.get_extra_info('peername')
        from utils.time_utils import get_moscow_time
        connection_time = get_moscow_time()
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω: {addr} (fd={fd}) –≤ {connection_time.strftime('%H:%M:%S')}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        if hasattr(self, 'connection_stats'):
            self.connection_stats['total_connections'] = getattr(self.connection_stats, 'total_connections', 0) + 1
        else:
            self.connection_stats = {'total_connections': 1}
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        connection = StationConnection(fd, addr, writer=writer)
        self.connection_manager.add_connection(connection)
        connection_reset = False
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        total_connections = len(self.connection_manager.get_all_connections())
        print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω: {addr[0]}:{addr[1]} (fd={fd}) - –°—Ç–∞–Ω—Ü–∏—è: {connection.box_id or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}")
        
        try:
            packet_count = 0
            while self.running:
                try:
                    packet_count += 1
                    
                    # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–∫–µ—Ç–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
                    try:
                        header = await reader.readexactly(2)
                        if not header:
                            break
                    except Exception as e:
                        break
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (big-endian)
                    packet_data_len = int.from_bytes(header, byteorder='big')
                    
                    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
                    try:
                        packet_data = await reader.readexactly(packet_data_len)
                    except asyncio.IncompleteReadError as e:
                        break
                    except Exception as e:
                        break
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –¥–∞–Ω–Ω—ã–µ)
                    data = header + packet_data
                    
                    # –í–ê–ñ–ù–û: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                    if not await self._validate_packet(data, connection):
                        continue
                        
                except asyncio.IncompleteReadError as e:
                    break
                except Exception as e:
                    break
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞
                should_close = await self._process_packet_data(data, connection, writer)
                if should_close:
                    break
        
        except asyncio.CancelledError:
            raise
        except ConnectionResetError as e:
            self.logger.warning(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º: {connection.box_id} ({addr}) - {e}")
            connection_reset = True
        except ConnectionAbortedError as e:
            self.logger.warning(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º: {connection.box_id} ({addr}) - {e}")
            connection_reset = True
        except OSError as e:
            if e.errno == 104:  # Connection reset by peer
                self.logger.warning(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ —Å—Ç–∞–Ω—Ü–∏–µ–π: {connection.box_id} ({addr}) - {e}")
                connection_reset = True
            else:
                self.logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {connection.box_id} ({addr}) - {e}")
                connection_reset = True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {addr} (fd={fd}): {e}")
            connection_reset = False
        
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            remaining_connections = len(self.connection_manager.get_all_connections())
            if connection_reset:
                print(f"–û—Ç–∫–ª—é—á–µ–Ω: {addr} (fd={fd}) - —Å–±—Ä–æ—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {remaining_connections}")
            else:
                print(f"–û—Ç–∫–ª—é—á–µ–Ω: {addr} (fd={fd}) - –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {remaining_connections}")
            self.connection_manager.remove_connection(fd)
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            if hasattr(self, 'connection_stats') and self.connection_stats['total_connections'] % 10 == 0:
                active_connections = len(self.connection_manager.get_all_connections())
                print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π {self.connection_stats['total_connections']}, –∞–∫—Ç–∏–≤–Ω—ã—Ö {active_connections}")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            try:
                if not writer.is_closing():
                    writer.close()
                    
                    if not connection_reset:
                        try:
                            await asyncio.wait_for(writer.wait_closed(), timeout=1.0)
                        except asyncio.TimeoutError:
                            print(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {addr}")
                        except Exception as wait_error:
                            if not isinstance(wait_error, (ConnectionResetError, OSError)):
                                self.logger.error(f"–û—à–∏–±–∫–∞: {e}")
            except Exception as close_error:
            
                if not isinstance(close_error, (ConnectionResetError, OSError)):
                    self.logger.error(f"–û—à–∏–±–∫–∞: {e}")
    
    async def start_servers(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç TCP –∏ HTTP —Å–µ—Ä–≤–µ—Ä—ã"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.initialize_database()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.station_handler = StationHandler(self.db_pool, self.connection_manager)
            self.borrow_handler = BorrowPowerbankHandler(self.db_pool, self.connection_manager)
            self.return_handler = ReturnPowerbankHandler(self.db_pool, self.connection_manager)
            self.eject_handler = EjectPowerbankHandler(self.db_pool, self.connection_manager)
            self.query_iccid_handler = QueryICCIDHandler(self.db_pool, self.connection_manager)
            self.slot_abnormal_report_handler = SlotAbnormalReportHandler(self.db_pool, self.connection_manager)
            self.restart_cabinet_handler = RestartCabinetHandler(self.db_pool, self.connection_manager)
            self.query_inventory_handler = QueryInventoryHandler(self.db_pool, self.connection_manager)
            self.query_voice_volume_handler = QueryVoiceVolumeHandler(self.db_pool, self.connection_manager)
            self.set_voice_volume_handler = SetVoiceVolumeHandler(self.db_pool, self.connection_manager)
            self.set_server_address_handler = SetServerAddressHandler(self.db_pool, self.connection_manager)
            self.query_server_address_handler = QueryServerAddressHandler(self.db_pool, self.connection_manager)
            
            # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
            self.http_server = HTTPServer()
            self.http_server.db_pool = self.db_pool
            
    
           
            self.running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º TCP —Å–µ—Ä–≤–µ—Ä—ã –Ω–∞ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö
            print("TCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç—ã")
            for port in TCP_PORTS:
        
                server_kwargs = {
                    'reuse_address': True
                }
                
                # reuse_port –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Linux
                if platform.system() == 'Linux':
                    server_kwargs['reuse_port'] = True
                
                server = await asyncio.start_server(
                    self.handle_client,
                    SERVER_IP,
                    port,
                    **server_kwargs
                )
                self.tcp_servers.append(server)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä —Å connection_manager
            http_app = self.http_server.create_app(self.connection_manager)
            http_runner = web.AppRunner(http_app)
            await http_runner.setup()
            http_site = web.TCPSite(http_runner, '0.0.0.0', HTTP_PORT)
            await http_site.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
            from websocket_server import WebSocketServer
            websocket_server = WebSocketServer(self.db_pool, self.connection_manager)
            ws_app = websocket_server.create_app()
            ws_runner = web.AppRunner(ws_app)
            await ws_runner.setup()
            ws_site = web.TCPSite(ws_runner, '0.0.0.0', 8001)
            await ws_site.start()
            print(f"HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:{HTTP_PORT}")
            print(f"WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:8001")
            print(f"–°–µ—Ä–≤–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:8002")
            
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            asyncio.create_task(self._connection_monitor())
            
           
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
            try:
             
                await asyncio.gather(*(srv.serve_forever() for srv in self.tcp_servers))
                        
            except asyncio.CancelledError:
                print("TCP —Å–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞: {e}")
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞: {e}")
        finally:
 
            pass
    
    async def _connection_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        while self.running:
            try:
                # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Ç–∞–π–º–∞—É—Ç 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
                cleaned = self.connection_manager.cleanup_inactive_connections(120)
                if cleaned > 0:
                    self.logger.info(f"–û—á–∏—â–µ–Ω–æ {cleaned} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                connections = self.connection_manager.get_all_connections()
                if connections:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                    stations = {}
                    for fd, conn in connections.items():
                        if conn.station_id:
                            if conn.station_id not in stations:
                                stations[conn.station_id] = []
                            stations[conn.station_id].append((fd, conn))
                    
                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
                    for station_id, station_connections in stations.items():
                        if len(station_connections) > 1:
                            print(f"  –°—Ç–∞–Ω—Ü–∏—è {station_id}: {len(station_connections)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ!)")
                            for fd, conn in station_connections:
                                from utils.time_utils import get_moscow_time
                                current_time = get_moscow_time()
                                time_since_heartbeat = (current_time - conn.last_heartbeat).total_seconds()
                                print(f"  - fd={fd}, box_id={conn.box_id}, heartbeat={time_since_heartbeat:.1f} —Å–µ–∫ –Ω–∞–∑–∞–¥")
                    
                    # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é
                    for station_id, station_connections in stations.items():
                        if len(station_connections) > 1:
                            print(f"–û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_id}: {len(station_connections)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
                            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                            station_connections.sort(key=lambda x: x[1].last_heartbeat, reverse=True)
                            for fd, conn in station_connections[1:]:  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
                                print(f"–ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ fd={fd}")
                                self.connection_manager.close_connection(fd)
                
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
                await asyncio.sleep(60)
    
    async def stop_servers(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä—ã"""
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
        self.running = False
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        await self._deactivate_all_stations()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await self._close_all_connections()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ TCP —Å–µ—Ä–≤–µ—Ä—ã
        for server in self.tcp_servers:
            if server:
                server.close()
        
        if self.http_server:
            self.http_server.stop_server()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π
        await self.cleanup_database()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã
        close_logger()
        close_tcp_logger()
        self.logger.info("–õ–æ–≥–≥–µ—Ä—ã –∑–∞–∫—Ä—ã—Ç—ã")
    
    async def _deactivate_all_stations(self):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            self.logger.info("–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏–π...")
            
            # –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
            connections = self.connection_manager.get_all_connections()
            active_stations = []
            
            for fd, conn in connections.items():
                if conn.station_id and conn.box_id:
                    active_stations.append((conn.station_id, conn.box_id))
            
            if active_stations:
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(active_stations)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞–Ω—Ü–∏—é
                for station_id, box_id in active_stations:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω
                        if not self.db_pool or self.db_pool._closed:
                            self.logger.warning("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
                            continue
                            
                        station = await Station.get_by_id(self.db_pool, station_id)
                        if station:
                            await station.update_status(self.db_pool, "inactive")
                            self.logger.info(f"–°—Ç–∞–Ω—Ü–∏—è {box_id} (ID: {station_id}) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                    except Exception as e:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å –∑–∞–∫—Ä—ã—Ç—ã–º –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                        if "Cannot acquire connection after closing pool" in str(e):
                            self.logger.warning(f"–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é —Å—Ç–∞–Ω—Ü–∏–∏ {box_id}")
                        else:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏ {box_id}: {e}")
            else:
                self.logger.info("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            await self._deactivate_all_active_stations_in_db()
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π: {e}")
    
    async def _close_all_connections(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            self.logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            
            connections = self.connection_manager.get_all_connections()
            if not connections:
                return
            
            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(connections)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
            
            closed_count = 0
            for fd, conn in connections.items():
                try:
                    if conn.writer and not conn.writer.is_closing():
                        self.logger.debug(f"–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {conn.addr} (—Å—Ç–∞–Ω—Ü–∏—è: {conn.box_id})")
                        conn.writer.close()
                        await conn.writer.wait_closed()
                        closed_count += 1
                    else:
                        self.logger.debug(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {conn.addr} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {conn.addr}: {e}")
            
            self.logger.info(f"–ó–∞–∫—Ä—ã—Ç–æ {closed_count} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
            
            # –û—á–∏—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            self.connection_manager.clear_all_connections()
            self.logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
    
    async def _deactivate_all_active_stations_in_db(self):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'active' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.logger.info("–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ –ë–î...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            if not self.db_pool or self.db_pool._closed:
                self.logger.warning("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
                return
            
            async with self.db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
                    await cur.execute("SELECT station_id, box_id FROM station WHERE status = 'active'")
                    active_stations = await cur.fetchall()
                    
                    if active_stations:
                        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(active_stations)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ –ë–î")
                        
                        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
                        await cur.execute("UPDATE station SET status = 'inactive' WHERE status = 'active'")
                        affected_rows = cur.rowcount
                        
                        self.logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {affected_rows} —Å—Ç–∞–Ω—Ü–∏–π –≤ –ë–î")
                        
                        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏—è—Ö
                        for station_id, box_id in active_stations:
                            self.logger.info(f"–°—Ç–∞–Ω—Ü–∏—è {box_id} (ID: {station_id}) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                    else:
                        self.logger.info("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
        except Exception as e:
            if "Cannot acquire connection after closing pool" in str(e):
                self.logger.warning("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é —Å—Ç–∞–Ω—Ü–∏–π –≤ –ë–î")
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–π –≤ –ë–î: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    server = OptimizedServer()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler():
        print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        asyncio.create_task(server.stop_servers())
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    if sys.platform != 'win32':
        loop = asyncio.get_event_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(sig, signal_handler)
    else:
        def windows_signal_handler(signum, frame):
            signal_handler()
        
        signal.signal(signal.SIGINT, windows_signal_handler)
        signal.signal(signal.SIGTERM, windows_signal_handler)
    
    try:
        await server.start_servers()
    except KeyboardInterrupt:
        print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except asyncio.CancelledError:
        print("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        try:
            await server.stop_servers()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–°–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except asyncio.CancelledError:
        print("–°–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)