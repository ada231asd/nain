"""
API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import secrets
import hashlib
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from aiohttp import web
from aiohttp.web import Request, Response
import aiomysql
import json
from utils.json_utils import serialize_for_json
from utils.invitation_storage import invitation_storage


class InvitationAPI:
    """API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, db_pool):
        self.db_pool = db_pool
    
    async def generate_invitation_link(self, request: Request) -> Response:
        """POST /api/invitations/generate - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        try:
            from utils.centralized_logger import get_logger
            logger = get_logger('invitation_api')
            
            logger.info("üé´ Generating invitation link...")
            
            data = await request.json()
            logger.info(f"üìù Received data: {data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            user = request.get('user')
            logger.info(f"üë§ User from request: {user}")
            
            if not user:
                logger.warning("‚ùå No user in request")
                return web.json_response({
                    'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
                }, status=401)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not await self._check_admin_permissions(user['user_id']):
                logger.warning(f"‚ùå User {user['user_id']} doesn't have admin permissions")
                return web.json_response({
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π'
                }, status=403)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            required_fields = ['org_unit_id', 'role']
            for field in required_fields:
                if field not in data:
                    logger.warning(f"‚ùå Missing field: {field}")
                    return web.json_response({
                        'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                    }, status=400)
            
            org_unit_id = data['org_unit_id']
            role = data['role']
            logger.info(f"‚úÖ Org unit ID: {org_unit_id}, Role: {role}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã
            if not await self._check_org_unit_exists(org_unit_id):
                logger.warning(f"‚ùå Org unit {org_unit_id} not found")
                return web.json_response({
                    'error': '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }, status=404)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            invitation_token = self._generate_invitation_token()
            logger.info(f"üîë Generated token: {invitation_token}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ –ø–∞–º—è—Ç–∏)
            success = invitation_storage.save_invitation(invitation_token, org_unit_id, role, user['user_id'])
            if not success:
                logger.error("‚ùå Failed to save invitation to storage")
                return web.json_response({
                    'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è'
                }, status=500)
            logger.info("üíæ Invitation saved to storage")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            from config.settings import FRONTEND_URL
            base_url = FRONTEND_URL
            logger.info(f"üåê Base URL: {base_url}")
            
            # URL-–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ URL
            from urllib.parse import quote
            encoded_token = quote(invitation_token, safe='')
            invitation_link = f"{base_url}/register?invitation={encoded_token}"
            logger.info(f"üîó Generated link: {invitation_link}")
            
            return web.json_response({
                'success': True,
                'invitation_link': invitation_link,
                'invitation_token': invitation_token,
                'org_unit_id': org_unit_id,
                'role': role
            })
            
        except Exception as e:
            from utils.centralized_logger import get_logger
            logger = get_logger('invitation_api')
            logger.error(f"‚ùå Error generating invitation: {str(e)}", exc_info=True)
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {str(e)}'
            }, status=500)
    
    async def get_invitation_info(self, request: Request) -> Response:
        """GET /api/invitations/{token} - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏"""
        try:
            invitation_token = request.match_info['token']
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
            invitation_info = await self._get_invitation_info(invitation_token)
            
            if not invitation_info:
                return web.json_response({
                    'error': '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ'
                }, status=404)
            
            # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω—É–∂–Ω–∞
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ
            org_unit_info = await self._get_org_unit_info(invitation_info['org_unit_id'])
            
            return web.json_response({
                'success': True,
                'invitation': {
                    'token': invitation_token,
                'org_unit_id': invitation_info['org_unit_id'],
                'org_unit_name': org_unit_info['name'],
                'role': invitation_info['role']
                }
            })
            
        except Exception as e:
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏: {str(e)}'
            }, status=500)
    
    async def register_with_invitation(self, request: Request) -> Response:
        """POST /api/invitations/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é"""
        try:
            data = await request.json()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            required_fields = ['phone_e164', 'email', 'invitation_token']
            for field in required_fields:
                if field not in data:
                    return web.json_response({
                        'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                    }, status=400)
            
            invitation_token = data['invitation_token']
            phone_e164 = data['phone_e164']
            email = data['email']
            fio = data.get('fio')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
            invitation_info = await self._get_invitation_info(invitation_token)
            
            if not invitation_info:
                return web.json_response({
                    'error': '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                }, status=404)
            
            # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω—É–∂–Ω–∞
            # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≥—Ä—É–ø–ø–µ
            user, password = await self._create_user_with_invitation(
                phone_e164, email, fio, invitation_info
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –Ω–∞ email
            from utils.notification_service import notification_service
            email_sent = await notification_service.send_password_email(
                email, password, fio, phone_e164
            )
            
            if not email_sent:
                return web.json_response({
                    'error': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –ø–∞—Ä–æ–ª–µ–º'
                }, status=500)
            
            return web.json_response({
                'success': True,
                'message': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ü–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email. –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
                'user_id': user.user_id,
                'status': user.status,
                'org_unit_id': invitation_info['org_unit_id'],
                'role': invitation_info['role']
            })
            
        except ValueError as e:
            return web.json_response({
                'error': str(e)
            }, status=400)
        except Exception as e:
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é: {str(e)}'
            }, status=500)
    
    async def list_invitations(self, request: Request) -> Response:
        """GET /api/invitations - –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            user = request.get('user')
            if not user:
                return web.json_response({
                    'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
                }, status=401)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not await self._check_admin_permissions(user['user_id']):
                return web.json_response({
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π'
                }, status=403)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
            invitations = await self._get_invitations_list()
            
            return web.json_response({
                'success': True,
                'invitations': invitations
            })
            
        except Exception as e:
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {str(e)}'
            }, status=500)
    
    def _generate_invitation_token(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        return secrets.token_urlsafe(32)
    
    async def _check_admin_permissions(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        async with self.db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT role FROM user_role 
                    WHERE user_id = %s AND role IN ('service_admin', 'group_admin', 'subgroup_admin')
                """, (user_id,))
                roles = await cur.fetchall()
                return len(roles) > 0
    
    async def _check_org_unit_exists(self, org_unit_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã"""
        async with self.db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT org_unit_id FROM org_unit WHERE org_unit_id = %s
                """, (org_unit_id,))
                return await cur.fetchone() is not None
    
    
    async def _get_invitation_info(self, token: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
        from utils.centralized_logger import get_logger
        logger = get_logger('invitation_api')
        
        logger.info(f"üîç Searching for invitation with token: {token}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        invitation = invitation_storage.get_invitation(token)
        
        if not invitation:
            logger.warning(f"‚ùå No invitation found in storage for token: {token}")
            return None
        
        logger.info(f"‚úÖ Found invitation in storage for token: {token}")
        return invitation
    
    async def _get_org_unit_info(self, org_unit_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ"""
        async with self.db_pool.acquire() as conn:
            async with conn.cursor(aiomysql.DictCursor) as cur:
                await cur.execute("""
                    SELECT org_unit_id, name, unit_type, parent_org_unit_id 
                    FROM org_unit WHERE org_unit_id = %s
                """, (org_unit_id,))
                return await cur.fetchone()
    
    async def _create_user_with_invitation(self, phone_e164: str, email: str, fio: str, 
                                         invitation_info: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≥—Ä—É–ø–ø–µ –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        from models.user import User
        import bcrypt
        import secrets
        import string
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        password = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(8))
        password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        
        async with self.db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                await cur.execute("""
                    SELECT user_id FROM app_user WHERE phone_e164 = %s OR email = %s
                """, (phone_e164, email))
                existing_user = await cur.fetchone()
                
                if existing_user:
                    raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await cur.execute("""
                    INSERT INTO app_user (phone_e164, email, password_hash, fio, status, powerbank_limit)
                    VALUES (%s, %s, %s, %s, %s, %s)
                """, (phone_e164, email, password_hash, fio, 'pending', None))
                
                user_id = cur.lastrowid
                
                # –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await cur.execute("""
                    INSERT INTO user_role (user_id, org_unit_id, role, created_at)
                    VALUES (%s, %s, %s, %s)
                """, (user_id, invitation_info['org_unit_id'], invitation_info['role'], datetime.now()))
                
                await conn.commit()
                
                user = User(
                    user_id=user_id,
                    phone_e164=phone_e164,
                    email=email,
                    password_hash=password_hash,
                    fio=fio,
                    status='pending',
                    created_at=datetime.now()
                )
                
                return user, password
    
    
    async def _get_invitations_list(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        invitations_raw = invitation_storage.get_all_invitations()
        
        invitations = []
        for invitation in invitations_raw:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            org_unit_info = await self._get_org_unit_info(invitation['org_unit_id'])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
            created_by_name = None
            if 'created_by' in invitation:
                user_info = await self._get_user_info(invitation['created_by'])
                if user_info:
                    created_by_name = user_info.get('fio', 'Unknown')
            
            invitations.append({
                'token': invitation['token'],
                'org_unit_id': invitation['org_unit_id'],
                'org_unit_name': org_unit_info.get('name', 'Unknown') if org_unit_info else 'Unknown',
                'role': invitation['role'],
                'used': invitation.get('used', False),
                'created_by': invitation.get('created_by'),
                'created_by_name': created_by_name,
                'created_at': invitation.get('created_at', '')
            })
        
        return invitations
    
    async def _get_user_info(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        async with self.db_pool.acquire() as conn:
            async with conn.cursor(aiomysql.DictCursor) as cur:
                await cur.execute("""
                    SELECT user_id, phone_e164, email, fio, status 
                    FROM app_user WHERE user_id = %s
                """, (user_id,))
                return await cur.fetchone()