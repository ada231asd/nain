#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º JSON
"""
import asyncio
import aiohttp
import json

async def test_user_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    base_url = "http://localhost:8080"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_user_data = {
        "fio": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "phone_e164": "+7 (999) 123-45-67",
        "email": "test@example.com",
        "role": "user",
        "parent_org_unit_id": "1",
        "—Å—Ç–∞—Ç—É—Å": "active",
        "password": "testpassword123"
    }
    
    test_update_data = {
        "fio": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "phone_e164": "+7 (999) 123-45-67",
        "email": "updated@example.com",
        "role": "subgroup_admin",
        "parent_org_unit_id": "2",
        "—Å—Ç–∞—Ç—É—Å": "active"
    }
    
    async with aiohttp.ClientSession() as session:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("=" * 50)
        
        # 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(test_user_data, ensure_ascii=False, indent=2)}")
        
        async with session.post(f"{base_url}/api/users", json=test_user_data) as resp:
            print(f"–°—Ç–∞—Ç—É—Å: {resp.status}")
            response_data = await resp.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(response_data, ensure_ascii=False, indent=2)}")
            
            if resp.status == 200 and response_data.get('success'):
                user_id = response_data['data']['user_id']
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {user_id}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        
        # 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        async with session.get(f"{base_url}/api/users/{user_id}") as resp:
            print(f"–°—Ç–∞—Ç—É—Å: {resp.status}")
            response_data = await resp.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(response_data, ensure_ascii=False, indent=2)}")
            
            if resp.status == 200 and response_data.get('success'):
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # 3. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\n3Ô∏è‚É£ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        print(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(test_update_data, ensure_ascii=False, indent=2)}")
        
        async with session.put(f"{base_url}/api/users/{user_id}", json=test_update_data) as resp:
            print(f"–°—Ç–∞—Ç—É—Å: {resp.status}")
            response_data = await resp.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(response_data, ensure_ascii=False, indent=2)}")
            
            if resp.status == 200 and response_data.get('success'):
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # 4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\n4Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        async with session.get(f"{base_url}/api/users/{user_id}") as resp:
            print(f"–°—Ç–∞—Ç—É—Å: {resp.status}")
            response_data = await resp.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(response_data, ensure_ascii=False, indent=2)}")
            
            if resp.status == 200 and response_data.get('success'):
                print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # 5. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print(f"\n5Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        async with session.get(f"{base_url}/api/users") as resp:
            print(f"–°—Ç–∞—Ç—É—Å: {resp.status}")
            response_data = await resp.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(response_data, ensure_ascii=False, indent=2)}")
            
            if resp.status == 200 and response_data.get('success'):
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(response_data['data'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # 6. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\n6Ô∏è‚É£ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        async with session.delete(f"{base_url}/api/users/{user_id}") as resp:
            print(f"–°—Ç–∞—Ç—É—Å: {resp.status}")
            response_data = await resp.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(response_data, ensure_ascii=False, indent=2)}")
            
            if resp.status == 200 and response_data.get('success'):
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        print("\n" + "=" * 50)
        print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(test_user_api())
