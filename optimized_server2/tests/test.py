import asyncio
import aiohttp
import json

async def test_powerbank_borrow():
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 33 (group_admin)
    auth_data = {
        "phone_e164": "+79013344076",
        "password": "HVhcbsN4"
    }
    
    async with aiohttp.ClientSession() as session:
        print("=== –¢–ï–°–¢ –í–´–î–ê–ß–ò –ü–û–í–ï–†–ë–ê–ù–ö–ê ===\n")
        
        # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        print("1. üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø...")
        async with session.post(
            "http://localhost:8000/api/auth/login",
            json=auth_data
        ) as resp:
            auth_result = await resp.json()
            token = auth_result.get("token")
            if not token:
                print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", auth_result)
                return
            print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        
        headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}

        # 2. –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–≤–µ—Ä–±–∞–Ω–∫–æ–≤ (–¥–æ –≤—ã–¥–∞—á–∏)
        print("\n2. üìã –î–û–°–¢–£–ü–ù–´–ï –ü–û–í–ï–†–ë–ê–ù–ö–ò (–î–û –í–´–î–ê–ß–ò)...")
        async with session.get(
            "http://localhost:8000/api/user/powerbanks/available",
            headers=headers
        ) as resp:
            result = await resp.json()
            if result.get('success'):
                data = result.get('data', {})
                limits = data.get('user_limits', {})
                print(f"   –õ–∏–º–∏—Ç—ã: –º–∞–∫—Å.{limits.get('max_limit')}, –≤–∑—è—Ç–æ: {limits.get('current_borrowed')}, –¥–æ—Å—Ç—É–ø–Ω–æ: {limits.get('available_by_limit')}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–≤–µ—Ä–±–∞–Ω–∫–æ–≤: {data.get('count', 0)}")
                for pb in data.get('available_powerbanks', []):
                    print(f"   - Powerbank {pb['powerbank_id']}: {pb['serial_number']} (SOH: {pb['soh']}%)")
            else:
                print("‚ùå –û—à–∏–±–∫–∞:", result.get('message'))

        # 3. –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π
        print("\n3. üè™ –°–ü–ò–°–û–ö –°–¢–ê–ù–¶–ò–ô...")
        async with session.get(
            "http://localhost:8000/api/user/stations",
            headers=headers
        ) as resp:
            stations_result = await resp.json()
            station_id = None
            if stations_result.get('success'):
                stations = stations_result.get('data', {}).get('stations', [])
                active_stations = [s for s in stations if s.get('status') == 'active']
                if active_stations:
                    station_id = active_stations[0]['station_id']
                    station = active_stations[0]
                    print(f"   –í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è: ID {station_id}, {station['box_id']}")
                    print(f"   –°–≤–æ–±–æ–¥–Ω–æ: {station['remain_num']}/{station['slots_declared']} —Å–ª–æ—Ç–æ–≤")
                else:
                    print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π")
                    return
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π")
                return

        # 4. –í–´–î–ê–ß–ê –ü–û–í–ï–†–ë–ê–ù–ö–ê
        print("\n4. üöÄ –í–´–î–ê–ß–ê –ü–û–í–ï–†–ë–ê–ù–ö–ê...")
        if station_id:
            borrow_data = {"station_id": station_id}
            
            async with session.post(
                "http://localhost:8000/api/user/powerbanks/borrow",
                headers=headers,
                json=borrow_data
            ) as resp:
                borrow_result = await resp.json()
                if borrow_result.get('success'):
                    data = borrow_result.get('data', {})
                    print("‚úÖ –í—ã–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–∞!")
                    print(f"   Order ID: {data.get('order_id')}")
                    print(f"   –ü–æ–≤–µ—Ä–±–∞–Ω–∫: {data.get('powerbank_serial')}")
                    print(f"   –°—Ç–∞–Ω—Ü–∏—è: {data.get('station_box_id')}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
                    limits = data.get('user_limits', {})
                    print(f"   –ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã: –º–∞–∫—Å.{limits.get('max_limit')}, –≤–∑—è—Ç–æ: {limits.get('current_borrowed')}, –¥–æ—Å—Ç—É–ø–Ω–æ: {limits.get('available_by_limit')}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏:", borrow_result.get('message'))

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∏ –ø–æ—Å–ª–µ –≤—ã–¥–∞—á–∏
        print("\n5. üìä –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –í–´–î–ê–ß–ò...")
        async with session.get(
            "http://localhost:8000/api/user/powerbanks/available",
            headers=headers
        ) as resp:
            result_after = await resp.json()
            if result_after.get('success'):
                data = result_after.get('data', {})
                limits = data.get('user_limits', {})
                print(f"   –õ–∏–º–∏—Ç—ã: –º–∞–∫—Å.{limits.get('max_limit')}, –≤–∑—è—Ç–æ: {limits.get('current_borrowed')}, –¥–æ—Å—Ç—É–ø–Ω–æ: {limits.get('available_by_limit')}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–≤–µ—Ä–±–∞–Ω–∫–æ–≤: {data.get('count', 0)}")
                for pb in data.get('available_powerbanks', []):
                    print(f"   - Powerbank {pb['powerbank_id']}: {pb['serial_number']} (SOH: {pb['soh']}%)")
            else:
                print("‚ùå –û—à–∏–±–∫–∞:", result_after.get('message'))

        # 6. –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n6. üì¶ –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ö–ê–ó–´...")
        async with session.get(
            "http://localhost:8000/api/user/orders",
            headers=headers
        ) as resp:
            orders_result = await resp.json()
            if orders_result.get('success'):
                orders = orders_result.get('data', {}).get('orders', [])
                active_orders = [o for o in orders if o.get('status') == 'borrow']
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(active_orders)}")
                for order in active_orders:
                    print(f"   - Order {order['order_id']}: {order['powerbank']['serial_number']} (—Å—Ç–∞—Ç—É—Å: {order['status']})")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤")

        print("\n" + "="*50)
        print("üéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if __name__ == "__main__":
    asyncio.run(test_powerbank_borrow())