#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è API –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import asyncio
import aiohttp
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8080"
TEST_USER_ID = 8  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
TEST_STATION_ID = 1  # ID —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

class UserFavoritesAPITester:
    """–¢–µ—Å—Ç–µ—Ä API –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.session = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def test_add_favorite(self, user_id: int, station_id: int):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        print(f"\nüîµ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        url = f"{self.base_url}/api/user-favorites"
        data = {
            "user_id": user_id,
            "station_id": station_id
        }
        
        try:
            async with self.session.post(url, json=data) as response:
                result = await response.json()
                print(f"–°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"–û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    async def test_get_favorites(self, user_id: int):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"\nüîµ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        url = f"{self.base_url}/api/user-favorites?user_id={user_id}"
        
        try:
            async with self.session.get(url) as response:
                result = await response.json()
                print(f"–°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"–û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    async def test_delete_favorite(self, favorite_id: int):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        print(f"\nüîµ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {favorite_id} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        
        url = f"{self.base_url}/api/user-favorites/{favorite_id}"
        
        try:
            async with self.session.delete(url) as response:
                result = await response.json()
                print(f"–°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"–û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    async def test_duplicate_favorite(self, user_id: int, station_id: int):
        """–¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        print(f"\nüîµ –¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {station_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        
        url = f"{self.base_url}/api/user-favorites"
        data = {
            "user_id": user_id,
            "station_id": station_id
        }
        
        try:
            async with self.session.post(url, json=data) as response:
                result = await response.json()
                print(f"–°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"–û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    async def test_invalid_user(self, station_id: int):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        print(f"\nüîµ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        url = f"{self.base_url}/api/user-favorites"
        data = {
            "user_id": 99999,  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            "station_id": station_id
        }
        
        try:
            async with self.session.post(url, json=data) as response:
                result = await response.json()
                print(f"–°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"–û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    async def test_invalid_station(self, user_id: int):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
        print(f"\nüîµ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏")
        
        url = f"{self.base_url}/api/user-favorites"
        data = {
            "user_id": user_id,
            "station_id": 99999  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è
        }
        
        try:
            async with self.session.post(url, json=data) as response:
                result = await response.json()
                print(f"–°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"–û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π")
    print(f"üìç –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {TEST_USER_ID}")
    print(f"üè¢ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è: {TEST_STATION_ID}")
    
    async with UserFavoritesAPITester(BASE_URL) as tester:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
        print("\n" + "="*60)
        print("1. –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–£–©–ò–• –ò–ó–ë–†–ê–ù–ù–´–• –°–¢–ê–ù–¶–ò–ô")
        print("="*60)
        await tester.test_get_favorites(TEST_USER_ID)
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        print("\n" + "="*60)
        print("2. –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–¢–ê–ù–¶–ò–ò –í –ò–ó–ë–†–ê–ù–ù–û–ï")
        print("="*60)
        add_result = await tester.test_add_favorite(TEST_USER_ID, TEST_STATION_ID)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è –¥–æ–±–∞–≤–∏–ª–∞—Å—å
        print("\n" + "="*60)
        print("3. –ü–†–û–í–ï–†–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø")
        print("="*60)
        favorites_result = await tester.test_get_favorites(TEST_USER_ID)
        
        # 4. –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç
        print("\n" + "="*60)
        print("4. –¢–ï–°–¢ –î–£–ë–õ–ò–ö–ê–¢–ê")
        print("="*60)
        await tester.test_duplicate_favorite(TEST_USER_ID, TEST_STATION_ID)
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\n" + "="*60)
        print("5. –¢–ï–°–¢ –ù–ï–í–ê–õ–ò–î–ù–´–• –î–ê–ù–ù–´–•")
        print("="*60)
        await tester.test_invalid_user(TEST_STATION_ID)
        await tester.test_invalid_station(TEST_USER_ID)
        
        # 6. –£–¥–∞–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞–Ω—Ü–∏—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        if favorites_result and favorites_result.get('success') and favorites_result.get('data'):
            favorite_id = favorites_result['data'][0]['id']
            print("\n" + "="*60)
            print("6. –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–ù–¶–ò–ò –ò–ó –ò–ó–ë–†–ê–ù–ù–û–ì–û")
            print("="*60)
            await tester.test_delete_favorite(favorite_id)
            
            # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è —É–¥–∞–ª–∏–ª–∞—Å—å
            print("\n" + "="*60)
            print("7. –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø")
            print("="*60)
            await tester.test_get_favorites(TEST_USER_ID)
    
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("="*60)

if __name__ == "__main__":
    asyncio.run(main())
