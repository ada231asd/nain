from typing import Optional, Dict, Any
import struct
import asyncio
from datetime import datetime

from models.station_powerbank import StationPowerbank
from models.powerbank import Powerbank
from models.order import Order
from models.station import Station
from models.slot_abnormal_report import SlotAbnormalReport
from models.powerbank_error import PowerbankError
from utils.centralized_logger import get_logger
from utils.packet_utils import (
    parse_return_power_bank_request,
    build_return_power_bank_response,
    generate_session_token
)


class ReturnPowerbankHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–≤–µ—Ä–±–∞–Ω–∫–æ–≤"""
    
    def __init__(self, db_pool, connection_manager):
        self.db_pool = db_pool
        self.connection_manager = connection_manager
        self.logger = get_logger('return_powerbank')
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ —Å –æ—à–∏–±–∫–æ–π
        self.pending_error_returns = {}
    
    async def handle_return_request(self, data: bytes, connection) -> Optional[bytes]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∞ (0x66)
        
        –ü—Ä–æ—Ç–æ–∫–æ–ª 3.5.1 Cabinet ‚Üí Server:
        - –°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: Slot, TerminalID, Level, Voltage, Current, Temperature, Status, SOH
        
        –õ–æ–≥–∏–∫–∞:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤–µ—Ä–±–∞–Ω–∫ –≤ –ë–î –ø–æ TerminalID
           - –ï—Å–ª–∏ –ù–ï–¢ ‚Üí —Å–æ–∑–¥–∞–µ–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'unknown'
        2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç
           - –ï—Å–ª–∏ –∑–∞–Ω—è—Ç ‚Üí Result=5 (Slot not empty)
        3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ (status='borrow')
           - –ï—Å–ª–∏ –µ—Å—Ç—å ‚Üí –º–µ–Ω—è–µ–º –Ω–∞ status='return'
        4. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤–µ—Ä–±–∞–Ω–∫ –≤ station_powerbank
        5. –û–±–Ω–æ–≤–ª—è–µ–º remain_num —Å—Ç–∞–Ω—Ü–∏–∏
        6. –û—Ç–≤–µ—á–∞–µ–º Result=1 (Success)
        
        –ü—Ä–æ—Ç–æ–∫–æ–ª 3.5.2 Server ‚Üí Cabinet:
        - –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç: Slot, Result (0-5), TerminalID, Level, Voltage, Current, Temperature, Status, SOH
        """
        try:
            # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏
            request = parse_return_power_bank_request(data)
            
            if 'error' in request:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {request.get('error')}")
                return None
            
            station_id = connection.station_id
            if not station_id:
                self.logger.warning("–ó–∞–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            slot = request.get('Slot', 0)
            terminal_id = request.get('TerminalID', '')
            level = request.get('Level', 0)
            voltage = request.get('Voltage', 0)
            current = request.get('Current', 0)
            temperature = request.get('Temperature', 0)
            status = request.get('Status', 0)
            soh = request.get('SOH', 100)
            vsn = request.get('VSN', 1)
            
            self.logger.info(f"üì• –í–æ–∑–≤—Ä–∞—Ç: —Å—Ç–∞–Ω—Ü–∏—è {station_id}, —Å–ª–æ—Ç {slot}, TerminalID={terminal_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–π –≤–æ–∑–≤—Ä–∞—Ç —Å –æ—à–∏–±–∫–æ–π –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
            pending_key = None
            for key, pending_data in self.pending_error_returns.items():
                if pending_data['station_id'] == station_id:
                    pending_key = key
                    break
            
            if pending_key:
                # –≠—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç —Å –æ—à–∏–±–∫–æ–π - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
                await self.handle_error_return_response(data, connection)
                # –û—Ç–≤–µ—á–∞–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ
                return self._build_response(
                    connection.secret_key, slot, 1,
                    terminal_id.encode('utf-8')[:8].ljust(8, b'\x00'),
                    level, voltage, current, temperature, status, soh, vsn
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: TerminalID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
            if not terminal_id:
                self.logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TerminalID –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {station_id}")
                return self._build_response(
                    connection.secret_key, slot, 4, b'\x00' * 8,
                    0, 0, 0, 0, 0, 0, vsn
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–æ–≤–µ—Ä–±–∞–Ω–∫ –≤ –ë–î
            try:
                powerbank = await Powerbank.get_by_serial(self.db_pool, terminal_id)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∞ {terminal_id}: {e}")
                powerbank = None
            
            # –ï—Å–ª–∏ –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∞ –Ω–µ—Ç –≤ –ë–î ‚Üí —Å–æ–∑–¥–∞–µ–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'unknown'
            if not powerbank:
                self.logger.warning(f"‚ö†Ô∏è –ü–æ–≤–µ—Ä–±–∞–Ω–∫ {terminal_id} –ù–ï –ù–ê–ô–î–ï–ù –≤ –ë–î ‚Üí —Å–æ–∑–¥–∞–µ–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'unknown'")
                try:
                    # –ü–æ–ª—É—á–∞–µ–º org_unit_id —Å—Ç–∞–Ω—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    station = await Station.get_by_id(self.db_pool, station_id)
                    org_unit_id = station.org_unit_id if station else None
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–≤–µ—Ä–±–∞–Ω–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'unknown'
                    powerbank = await Powerbank.create_unknown(
                        self.db_pool, terminal_id, org_unit_id
                    )
                    self.logger.info(
                        f"‚úÖ –ü–æ–≤–µ—Ä–±–∞–Ω–∫ {terminal_id} —Å–æ–∑–¥–∞–Ω: "
                        f"powerbank_id={powerbank.powerbank_id}, status='unknown'"
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∞ {terminal_id}: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    return self._build_response(
                        connection.secret_key, slot, 4,
                        terminal_id.encode('utf-8')[:8].ljust(8, b'\x00'),
                        level, voltage, current, temperature, status, soh, vsn
                    )
            else:
                self.logger.info(f"‚úÖ –ü–æ–≤–µ—Ä–±–∞–Ω–∫ –Ω–∞–π–¥–µ–Ω: powerbank_id={powerbank.powerbank_id}, status='{powerbank.status}'")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°–ª–æ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–Ω—è—Ç
            existing_in_slot = await StationPowerbank.get_by_station_and_slot(
                self.db_pool, station_id, slot
            )
            
            if existing_in_slot:
                self.logger.warning(f"‚ö†Ô∏è –°–ª–æ—Ç {slot} —É–∂–µ –∑–∞–Ω—è—Ç –ø–æ–≤–µ—Ä–±–∞–Ω–∫–æ–º {existing_in_slot.powerbank_id}")
                # Result=5: Slot not empty
                return self._build_response(
                    connection.secret_key, slot, 5,
                    terminal_id.encode('utf-8')[:8].ljust(8, b'\x00'),
                    level, voltage, current, temperature, status, soh, vsn
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ï—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'borrow'
            active_order = None
            try:
                active_order = await Order.get_active_borrow_order(
                    self.db_pool, powerbank.powerbank_id
                )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: {e}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ ‚Üí –∑–∞–∫—Ä—ã–≤–∞–µ–º (borrow ‚Üí return)
            if active_order:
                try:
                    await Order.update_order_status(
                        self.db_pool, active_order.order_id, 'return'
                    )
                    self.logger.info(
                        f"‚úÖ –ó–∞–∫–∞–∑ {active_order.order_id} –∑–∞–∫—Ä—ã—Ç: "
                        f"borrow ‚Üí return (–ø–æ–≤–µ—Ä–±–∞–Ω–∫ {terminal_id})"
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞ {active_order.order_id}: {e}")
            else:
                self.logger.info(f"‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∞ {terminal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤–µ—Ä–±–∞–Ω–∫ –≤ station_powerbank
            try:
                await StationPowerbank.add_powerbank(
                    self.db_pool,
                    station_id,
                    powerbank.powerbank_id,
                    slot,
                    level=level,
                    voltage=voltage,
                    temperature=temperature
                )
                self.logger.info(
                    f"‚úÖ –ü–æ–≤–µ—Ä–±–∞–Ω–∫ {terminal_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ station_powerbank "
                    f"(—Å—Ç–∞–Ω—Ü–∏—è {station_id}, —Å–ª–æ—Ç {slot})"
                )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ station_powerbank: {e}")
                # –í—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º Success, –ø–æ–≤–µ—Ä–±–∞–Ω–∫ –ø—Ä–∏–Ω—è—Ç
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
            try:
                station = await Station.get_by_id(self.db_pool, station_id)
                if station:
                    await station.update_last_seen(self.db_pool)
                    new_remain = int(station.remain_num) + 1
                    await station.update_remain_num(self.db_pool, new_remain)
                    self.logger.info(f"‚úÖ –°—Ç–∞–Ω—Ü–∏—è {station_id}: remain_num {station.remain_num} ‚Üí {new_remain}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏: {e}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            try:
                from handlers.query_inventory import QueryInventoryHandler
                inventory_handler = QueryInventoryHandler(self.db_pool, self.connection_manager)
                await inventory_handler.send_inventory_request(station_id)
                self.logger.info(f"üìä –ó–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é {station_id}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: Result=1 (Success)
            response = self._build_response(
                connection.secret_key, slot, 1,
                terminal_id.encode('utf-8')[:8].ljust(8, b'\x00'),
                level, voltage, current, temperature, status, soh, vsn
            )
            
            self.logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∞ {terminal_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return response
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}", exc_info=True)
            return None
    
    def _build_response(self, secret_key: str, slot: int, result: int,
                       terminal_id: bytes, level: int, voltage: int,
                       current: int, temperature: int, status: int,
                       soh: int, vsn: int) -> bytes:
        """
        –°—Ç—Ä–æ–∏—Ç –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∞ (3.5.2)
        
        Args:
            secret_key: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —Å—Ç–∞–Ω—Ü–∏–∏
            slot: –ù–æ–º–µ—Ä —Å–ª–æ—Ç–∞
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç (0: Failure, 1: Success, 2: Status Error, 
                              3: Duplicate, 4: Invalid ID, 5: Slot not empty)
            terminal_id: ID –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∞ (8 –±–∞–π—Ç)
            level: –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ (0-100)
            voltage: –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (mV)
            current: –¢–æ–∫ (mA)
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (-127 to 128)
            status: –°—Ç–∞—Ç—É—Å bitmap
            soh: –ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏ (0-100)
            vsn: –í–µ—Ä—Å–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            
        Returns:
            bytes: –ü–∞–∫–µ—Ç –æ—Ç–≤–µ—Ç–∞
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        payload = struct.pack(
            ">BB8sBHHbBB",
            slot, result, terminal_id, level, voltage, current, 
            temperature, status, soh
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        token = generate_session_token(payload, secret_key)
        
        # –°—Ç—Ä–æ–∏–º –æ—Ç–≤–µ—Ç
        response = build_return_power_bank_response(
            slot, result, terminal_id, level, voltage, current,
            temperature, status, soh, vsn, token
        )
        
        return response
    
    async def start_damage_return_process(self, station_id: int, user_id: int, description: str, error_type: str = 'other') -> Dict[str, Any]:
        """
        –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∞ —Å –ø–æ–ª–æ–º–∫–æ–π
        
        Args:
            station_id: ID —Å—Ç–∞–Ω—Ü–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏ (broken, lost, other)
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ø–æ–ª–æ–º–∫–æ–π: —Å—Ç–∞–Ω—Ü–∏—è {station_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –æ–ø–∏—Å–∞–Ω–∏–µ: {description}, —Ç–∏–ø –æ—à–∏–±–∫–∏: {error_type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            station = await Station.get_by_id(self.db_pool, station_id)
            if not station:
                return {"success": False, "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
            active_orders = await Order.get_active_orders_by_user(self.db_pool, user_id)
            if not active_orders:
                return {"success": False, "message": "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"}
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
            active_order = active_orders[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≤–µ—Ä–±–∞–Ω–∫ –∏–∑ –∑–∞–∫–∞–∑–∞
            if not active_order.powerbank_id:
                return {"success": False, "message": "–í –∑–∞–∫–∞–∑–µ –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–≤–µ—Ä–±–∞–Ω–∫"}
            
            powerbank = await Powerbank.get_by_id(self.db_pool, active_order.powerbank_id)
            if not powerbank:
                return {"success": False, "message": "–ü–æ–≤–µ—Ä–±–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
            new_status = 'user_reported_broken'
            write_off_reason = error_type if error_type in ['broken', 'lost', 'other'] else 'other'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≤–µ—Ä–±–∞–Ω–∫
            await powerbank.update_status(self.db_pool, new_status)
            await powerbank.update_write_off_reason(self.db_pool, write_off_reason)
            
            self.logger.info(f"–ü–æ–≤–µ—Ä–±–∞–Ω–∫ {powerbank.powerbank_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ {new_status} —Å –ø—Ä–∏—á–∏–Ω–æ–π {write_off_reason}")
            
            return {
                "success": True,
                "message": "–í–æ–∑–≤—Ä–∞—Ç —Å –ø–æ–ª–æ–º–∫–æ–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω",
                "powerbank_id": powerbank.powerbank_id,
                "error_type": error_type,
                "new_status": new_status,
                "write_off_reason": write_off_reason
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –ø–æ–ª–æ–º–∫–æ–π: {e}")
            return {"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"}
    
    async def start_error_return_process(self, station_id: int, user_id: int, error_type_id: int = 1) -> Dict[str, Any]:
        """
        –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∞ —Å –æ—à–∏–±–∫–æ–π –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        
        Args:
            station_id: ID —Å—Ç–∞–Ω—Ü–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            error_type_id: ID —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã powerbank_error
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π: —Å—Ç–∞–Ω—Ü–∏—è {station_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ç–∏–ø –æ—à–∏–±–∫–∏ ID: {error_type_id}")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            try:
                powerbank_error = await PowerbankError.get_by_id(self.db_pool, error_type_id)
                if not powerbank_error:
                    return {"success": False, "message": f"–¢–∏–ø –æ—à–∏–±–∫–∏ —Å ID {error_type_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏: {e}")
                return {"success": False, "message": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
            station = await Station.get_by_id(self.db_pool, station_id)
            if not station:
                return {"success": False, "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç–∞–Ω—Ü–∏–µ–π
            connection = self.connection_manager.get_connection_by_station_id(station_id)
            if not connection:
                return {"success": False, "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
            active_orders = await Order.get_active_orders_by_user(self.db_pool, user_id)
            if not active_orders:
                return {"success": False, "message": "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"}
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
            active_order = active_orders[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≤–µ—Ä–±–∞–Ω–∫ –∏–∑ –∑–∞–∫–∞–∑–∞
            if not active_order.powerbank_id:
                return {"success": False, "message": "–í –∑–∞–∫–∞–∑–µ –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–≤–µ—Ä–±–∞–Ω–∫"}
            
            powerbank = await Powerbank.get_by_id(self.db_pool, active_order.powerbank_id)
            if not powerbank:
                return {"success": False, "message": "–ü–æ–≤–µ—Ä–±–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –∞–Ω–æ–º–∞–ª–∏–∏
            try:
                await SlotAbnormalReport.create(
                    self.db_pool,
                    station_id=station_id,
                    slot_number=0,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏
                    terminal_id=powerbank.serial_number,
                    event_type=str(error_type_id),
                    reported_at=datetime.now()
                )
                self.logger.info(f"–°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –æ–± –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_id}, –ø–æ–≤–µ—Ä–±–∞–Ω–∫ {powerbank.serial_number}, —Ç–∏–ø –æ—à–∏–±–∫–∏: {powerbank_error.type_error}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏: {e}")
            
            # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏
            future = asyncio.Future()
            return_key = f"{station_id}_{user_id}_{active_order.order_id}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–∂–∏–¥–∞—é—â–µ–º –≤–æ–∑–≤—Ä–∞—Ç–µ
            self.pending_error_returns[return_key] = {
                'future': future,
                'station_id': station_id,
                'user_id': user_id,
                'order_id': active_order.order_id,
                'powerbank_id': powerbank.powerbank_id,
                'error_type_id': error_type_id,
                'error_description': powerbank_error.type_error,
                'created_at': datetime.now()
            }
            
            self.logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π: {return_key}")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
            try:
                result = await asyncio.wait_for(future, timeout=30.0)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
                if return_key in self.pending_error_returns:
                    del self.pending_error_returns[return_key]
                
                return result
                
            except asyncio.TimeoutError:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
                if return_key in self.pending_error_returns:
                    del self.pending_error_returns[return_key]
                
                self.logger.error(f"–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π: {return_key}")
                return {"success": False, "message": "–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ (30 —Å–µ–∫—É–Ω–¥)"}
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π: {e}")
            return {"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"}
    
    async def handle_error_return_response(self, data: bytes, connection) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å –æ—à–∏–±–∫–æ–π
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏
            connection: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç–∞–Ω—Ü–∏–µ–π
        """
        try:
            station_id = connection.station_id
            if not station_id:
                return
            
            # –ò—â–µ–º –æ–∂–∏–¥–∞—é—â–∏–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
            pending_key = None
            for key, pending_data in self.pending_error_returns.items():
                if pending_data['station_id'] == station_id:
                    pending_key = key
                    break
            
            if not pending_key:
                self.logger.warning(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å –æ—à–∏–±–∫–æ–π –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {station_id}, –Ω–æ –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–∑–≤—Ä–∞—Ç–æ–≤")
                return
            
            pending_data = self.pending_error_returns[pending_key]
            future = pending_data['future']
            
            if future.done():
                return
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏
            request = parse_return_power_bank_request(data)
            
            if 'error' in request:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å –æ—à–∏–±–∫–æ–π: {request.get('error')}")
                future.set_result({"success": False, "message": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏"})
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            slot = request.get('Slot', 0)
            terminal_id = request.get('TerminalID', '')
            level = request.get('Level', 0)
            voltage = request.get('Voltage', 0)
            current = request.get('Current', 0)
            temperature = request.get('Temperature', 0)
            status = request.get('Status', 0)
            soh = request.get('SOH', 100)
            
            self.logger.info(f"üì• –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å –æ—à–∏–±–∫–æ–π: —Å—Ç–∞–Ω—Ü–∏—è {station_id}, —Å–ª–æ—Ç {slot}, TerminalID={terminal_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –∞–Ω–æ–º–∞–ª–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ª–æ—Ç–µ
            try:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –∏ –ø–æ–≤–µ—Ä–±–∞–Ω–∫–∞
                reports = await SlotAbnormalReport.get_by_station_id(self.db_pool, station_id, limit=10)
                for report in reports:
                    if report.terminal_id == terminal_id and report.slot_number == 0:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç –≤ –æ—Ç—á–µ—Ç–µ
                        async with self.db_pool.acquire() as conn:
                            async with conn.cursor() as cur:
                                await cur.execute(
                                    "UPDATE slot_abnormal_reports SET slot_number = %s WHERE report_id = %s",
                                    (slot, report.report_id)
                                )
                        break
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
            try:
                await Order.update_order_status(
                    self.db_pool, pending_data['order_id'], 'return'
                )
                self.logger.info(f"–ó–∞–∫–∞–∑ {pending_data['order_id']} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤–µ—Ä–±–∞–Ω–∫ –≤ station_powerbank
            try:
                await StationPowerbank.add_powerbank(
                    self.db_pool,
                    station_id,
                    pending_data['powerbank_id'],
                    slot,
                    level=level,
                    voltage=voltage,
                    temperature=temperature
                )
                self.logger.info(f"–ü–æ–≤–µ—Ä–±–∞–Ω–∫ {terminal_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ station_powerbank (—Å—Ç–∞–Ω—Ü–∏—è {station_id}, —Å–ª–æ—Ç {slot})")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ station_powerbank: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
            try:
                station = await Station.get_by_id(self.db_pool, station_id)
                if station:
                    await station.update_last_seen(self.db_pool)
                    new_remain = int(station.remain_num) + 1
                    await station.update_remain_num(self.db_pool, new_remain)
                    self.logger.info(f"–°—Ç–∞–Ω—Ü–∏—è {station_id}: remain_num {station.remain_num} ‚Üí {new_remain}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —É—Å–ø–µ—à–Ω–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ
            future.set_result({
                "success": True,
                "message": "–í–æ–∑–≤—Ä–∞—Ç —Å –æ—à–∏–±–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
                "station_id": station_id,
                "slot": slot,
                "terminal_id": terminal_id,
                "powerbank_id": pending_data['powerbank_id'],
                "order_id": pending_data['order_id'],
                "error_type_id": pending_data.get('error_type_id'),
                "error_description": pending_data.get('error_description')
            })
            
            self.logger.info(f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç —Å –æ—à–∏–±–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station_id}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å –æ—à–∏–±–∫–æ–π: {e}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
            if pending_key and pending_key in self.pending_error_returns:
                future = self.pending_error_returns[pending_key]['future']
                if not future.done():
                    future.set_result({"success": False, "message": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"})