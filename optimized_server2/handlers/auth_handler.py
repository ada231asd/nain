"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""
import json
import jwt
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from aiohttp import web
import aiomysql

from models.user import User, EmailService, VerificationCode
from config.settings import JWT_SECRET_KEY, JWT_ALGORITHM, JWT_EXPIRATION_HOURS, PASSWORD_MAX_LENGTH
from utils.centralized_logger import get_logger


class AuthHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, db_pool):
        self.db_pool = db_pool
        self.email_service = EmailService()
        self.logger = get_logger('auth_handler')
    
    def create_jwt_token(self, user_id: int, phone_e164: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω"""
        payload = {
            'user_id': user_id,
            'phone_e164': phone_e164,
            'exp': datetime.utcnow() + timedelta(hours=JWT_EXPIRATION_HOURS),
            'iat': datetime.utcnow()
        }
        return jwt.encode(payload, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)
    
    def verify_jwt_token(self, token: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω"""
        try:
            payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
            return payload
        except jwt.ExpiredSignatureError:
            return None
        except jwt.InvalidTokenError:
            return None
    
    async def register_user(self, request):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            data = await request.json()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            required_fields = ['phone_e164', 'email']
            for field in required_fields:
                if field not in data:
                    return web.json_response({
                        'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                    }, status=400)
            
            phone_e164 = data['phone_e164']
            email = data['email']
            fio = data.get('fio')
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user, password = await User.create_user(
                self.db_pool, phone_e164, email, fio
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –Ω–∞ email
            email_sent = await self.email_service.send_password_email(
                email, password, fio
            )
            
            if not email_sent:
                return web.json_response({
                    'error': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –ø–∞—Ä–æ–ª–µ–º'
                }, status=500)
            
            return web.json_response({
                'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email. –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
                'user_id': user.user_id,
                'status': user.status
            })
            
        except ValueError as e:
            return web.json_response({
                'error': str(e)
            }, status=400)
        except Exception as e:
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}'
            }, status=500)
    
    async def login_user(self, request):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∞—Ç–∞–∫ –ø–æ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º—É –∫–∞–Ω–∞–ª—É"""
        try:
            data = await request.json()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            required_fields = ['phone_e164', 'password']
            for field in required_fields:
                if field not in data:
                    return web.json_response({
                        'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                    }, status=400)
            
            phone_e164 = data['phone_e164']
            password = data['password']
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫ –ø–æ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º—É –∫–∞–Ω–∞–ª—É - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
            if len(password) > PASSWORD_MAX_LENGTH:
                self.logger.warning(f"üö® –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–û–ü–´–¢–ö–ê: –ü–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π {len(password)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_e164}")
                return web.json_response({
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
                }, status=401)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
            is_valid, error = User.validate_password(password)
            if not is_valid:
                self.logger.warning(f"üö® –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô –ü–ê–†–û–õ–¨: {error} –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_e164}")
                return web.json_response({
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
                }, status=401)
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            user = await User.authenticate(self.db_pool, phone_e164, password)
            
            if not user:
                return web.json_response({
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
                }, status=401)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            async with self.db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        "UPDATE app_user SET last_login_at = NOW() WHERE user_id = %s",
                        (user.user_id,)
                    )
            
            # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
            token = self.create_jwt_token(user.user_id, user.phone_e164)
            
            return web.json_response({
                'message': '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
                'token': token,
                'user': user.to_dict()
            })
            
        except Exception as e:
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}'
            }, status=500)
    
    async def send_verification_code(self, request):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            data = await request.json()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            required_fields = ['phone_e164', 'email']
            for field in required_fields:
                if field not in data:
                    return web.json_response({
                        'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                    }, status=400)
            
            phone_e164 = data['phone_e164']
            email = data['email']
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            verification_code = await VerificationCode.create_code(
                self.db_pool, phone_e164, email
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ email
            email_sent = await self.email_service.send_verification_code(
                email, verification_code.code
            )
            
            if not email_sent:
                return web.json_response({
                    'error': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
                }, status=500)
            
            return web.json_response({
                'message': '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email'
            })
            
        except Exception as e:
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}'
            }, status=500)
    
    async def verify_code_and_login(self, request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        try:
            data = await request.json()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            required_fields = ['phone_e164', 'code']
            for field in required_fields:
                if field not in data:
                    return web.json_response({
                        'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                    }, status=400)
            
            phone_e164 = data['phone_e164']
            code = data['code']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
            is_valid = await VerificationCode.verify_code(
                self.db_pool, phone_e164, code
            )
            
            if not is_valid:
                return web.json_response({
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
                }, status=400)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await User.get_by_phone(self.db_pool, phone_e164)
            
            if not user:
                return web.json_response({
                    'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }, status=404)
            
            # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
            token = self.create_jwt_token(user.user_id, user.phone_e164)
            
            return web.json_response({
                'message': '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
                'token': token,
                'user': user.to_dict()
            })
            
        except Exception as e:
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: {str(e)}'
            }, status=500)
    
    async def get_user_profile(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            auth_header = request.headers.get('Authorization')
            if not auth_header or not auth_header.startswith('Bearer '):
                return web.json_response({
                    'error': '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
                }, status=401)
            
            token = auth_header.split(' ')[1]
            payload = self.verify_jwt_token(token)
            
            if not payload:
                return web.json_response({
                    'error': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
                }, status=401)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await User.get_by_phone(
                self.db_pool, payload['phone_e164']
            )
            
            if not user:
                return web.json_response({
                    'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }, status=404)
            
            return web.json_response({
                'user': user.to_dict()
            })
            
        except Exception as e:
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}'
            }, status=500)
    
    async def update_user_profile(self, request):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            auth_header = request.headers.get('Authorization')
            if not auth_header or not auth_header.startswith('Bearer '):
                return web.json_response({
                    'error': '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
                }, status=401)
            
            token = auth_header.split(' ')[1]
            payload = self.verify_jwt_token(token)
            
            if not payload:
                return web.json_response({
                    'error': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
                }, status=401)
            
            data = await request.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await User.get_by_phone(
                self.db_pool, payload['phone_e164']
            )
            
            if not user:
                return web.json_response({
                    'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }, status=404)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with self.db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    update_fields = []
                    update_values = []
                    
                    if 'fio' in data:
                        update_fields.append('fio = %s')
                        update_values.append(data['fio'])
                    
                    if 'email' in data:
                        update_fields.append('email = %s')
                        update_values.append(data['email'])
                    
                    if update_fields:
                        update_values.append(user.user_id)
                        query = f"UPDATE app_user SET {', '.join(update_fields)} WHERE user_id = %s"
                        await cur.execute(query, update_values)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updated_user = await User.get_by_phone(
                self.db_pool, payload['phone_e164']
            )
            
            return web.json_response({
                'message': '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
                'user': updated_user.to_dict()
            })
            
        except Exception as e:
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}'
            }, status=500)
    
    async def get_pending_users(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            auth_header = request.headers.get('Authorization')
            if not auth_header or not auth_header.startswith('Bearer '):
                return web.json_response({
                    'error': '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
                }, status=401)
            
            token = auth_header.split(' ')[1]
            payload = self.verify_jwt_token(token)
            
            if not payload:
                return web.json_response({
                    'error': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
                }, status=401)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            current_user = await User.get_by_phone(self.db_pool, payload['phone_e164'])
            if not current_user or current_user.role not in ['service_admin', 'group_admin']:
                return web.json_response({
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å service_admin –∏–ª–∏ group_admin'
                }, status=403)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
            async with self.db_pool.acquire() as conn:
                async with conn.cursor(aiomysql.DictCursor) as cur:
                    await cur.execute("""
                        SELECT user_id, phone_e164, email, fio, status, created_at
                        FROM app_user 
                        WHERE status = 'pending'
                        ORDER BY created_at DESC
                    """)
                    users_data = await cur.fetchall()
            
            users = []
            for user_data in users_data:
                users.append({
                    'user_id': user_data['user_id'],
                    'phone_e164': user_data['phone_e164'],
                    'email': user_data['email'],
                    'fio': user_data['fio'],
                    'status': user_data['status'],
                    'created_at': user_data['created_at'].isoformat() if user_data['created_at'] else None
                })
            
            return web.json_response({
                'users': users
            })
            
        except Exception as e:
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}'
            }, status=500)
    
    async def approve_user(self, request):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            auth_header = request.headers.get('Authorization')
            if not auth_header or not auth_header.startswith('Bearer '):
                return web.json_response({
                    'error': '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
                }, status=401)
            
            token = auth_header.split(' ')[1]
            payload = self.verify_jwt_token(token)
            
            if not payload:
                return web.json_response({
                    'error': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
                }, status=401)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            current_user = await User.get_by_phone(self.db_pool, payload['phone_e164'])
            if not current_user or current_user.role not in ['service_admin', 'group_admin']:
                return web.json_response({
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å service_admin –∏–ª–∏ group_admin'
                }, status=403)
            
            data = await request.json()
            user_id = data.get('user_id')
            
            if not user_id:
                return web.json_response({
                    'error': 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
                }, status=400)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ active
            async with self.db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        "UPDATE app_user SET status = 'active' WHERE user_id = %s",
                        (user_id,)
                    )
                    
                    if cur.rowcount == 0:
                        return web.json_response({
                            'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                        }, status=404)
            
            return web.json_response({
                'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
            })
            
        except Exception as e:
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}'
            }, status=500)
    
    async def reject_user(self, request):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            auth_header = request.headers.get('Authorization')
            if not auth_header or not auth_header.startswith('Bearer '):
                return web.json_response({
                    'error': '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
                }, status=401)
            
            token = auth_header.split(' ')[1]
            payload = self.verify_jwt_token(token)
            
            if not payload:
                return web.json_response({
                    'error': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
                }, status=401)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            current_user = await User.get_by_phone(self.db_pool, payload['phone_e164'])
            if not current_user or current_user.role not in ['service_admin', 'group_admin']:
                return web.json_response({
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å service_admin –∏–ª–∏ group_admin'
                }, status=403)
            
            data = await request.json()
            user_id = data.get('user_id')
            
            if not user_id:
                return web.json_response({
                    'error': 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
                }, status=400)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ blocked
            async with self.db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        "UPDATE app_user SET status = 'blocked' WHERE user_id = %s",
                        (user_id,)
                    )
                    
                    if cur.rowcount == 0:
                        return web.json_response({
                            'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                        }, status=404)
            
            return web.json_response({
                'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω'
            })
            
        except Exception as e:
            return web.json_response({
                'error': f'–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}'
            }, status=500)
