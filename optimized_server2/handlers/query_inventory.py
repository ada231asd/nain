"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∫–∞–±–∏–Ω–µ—Ç–∞
"""
import logging
import os
from typing import Dict, Any
from datetime import datetime, timezone

from models.station import Station
from models.powerbank import Powerbank
from utils.packet_utils import build_query_inventory_request, parse_query_inventory_response
from models.connection import StationConnection

class QueryInventoryHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∫–∞–±–∏–Ω–µ—Ç–∞ (0x64)"""

    def __init__(self, db_pool, connection_manager):
        self.db_pool = db_pool
        self.connection_manager = connection_manager
        self.logger = self._setup_logger()

    def _setup_logger(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª"""
        os.makedirs('logs', exist_ok=True)
        logger = logging.getLogger('query_inventory')
        logger.setLevel(logging.INFO)
        logger.handlers.clear()
        handler = logging.FileHandler('logs/query_inventory.log', encoding='utf-8')
        handler.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        return logger

    async def send_inventory_request(self, station_id: int) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å—Ç–∞–Ω—Ü–∏–∏.
        """
        station = await Station.get_by_id(self.db_pool, station_id)
        if not station:
            self.logger.error(f"–°—Ç–∞–Ω—Ü–∏—è —Å ID {station_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.")
            return {"success": False, "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

        connection = self.connection_manager.get_connection_by_station_id(station_id)
        if not connection or not connection.writer or connection.writer.is_closing():
            self.logger.error(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç–∞–Ω—Ü–∏–µ–π {station.box_id} (ID: {station_id}) –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.")
            return {"success": False, "message": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ."}

        secret_key = connection.secret_key
        if not secret_key:
            self.logger.error(f"–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station.box_id} (ID: {station_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return {"success": False, "message": "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω."}

        try:
            inventory_request_packet = build_query_inventory_request(secret_key, station_box_id=station.box_id)
            packet_hex = inventory_request_packet.hex()

            connection.writer.write(inventory_request_packet)
            await connection.writer.drain()

            self.logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é {station.box_id} (ID: {station_id}) | –ü–∞–∫–µ—Ç: {packet_hex}")
            print(f" –ó–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é {station.box_id} (ID: {station_id})")

            return {
                "success": True,
                "message": f"–ó–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é {station.box_id}.",
                "packet_hex": packet_hex
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é {station.box_id} (ID: {station_id}): {e}")
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}"}

    async def handle_inventory_response(self, data: bytes, connection: StationConnection) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        """
        try:
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            response = parse_query_inventory_response(data)
            
            if not response.get("CheckSumValid", False):
                print(f" –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            from utils.packet_utils import verify_token
            import struct
            payload = struct.pack("BB", response.get('SlotsNum', 0), response.get('RemainNum', 0))
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–æ–≤
            for slot_data in response.get('Slots', []):
                payload += struct.pack("B8sBHHBBB", 
                    slot_data['Slot'],
                    slot_data['TerminalID'].encode('ascii'),
                    slot_data['Level'],
                    slot_data['Voltage'],
                    slot_data['Current'],
                    slot_data['Temperature'],
                    0,  # status byte
                    slot_data['SOH']
                )
            
            received_token = int(response.get("Token", "0x0"), 16)
            if not verify_token(payload, connection.secret_key, received_token):
                print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id}")
                return
            
            print(f" –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id}")
            print(f" –°–ª–æ—Ç–æ–≤: {response.get('SlotsNum', 0)}, –°–≤–æ–±–æ–¥–Ω–æ: {response.get('RemainNum', 0)}")
            print(f" –ü–æ–≤–µ—Ä–±–∞–Ω–∫–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {len(response.get('Slots', []))}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º remain_num —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –ë–î
            station = await Station.get_by_id(self.db_pool, connection.station_id)
            if station:
                await station.update_remain_num(self.db_pool, response.get('RemainNum', 0))
                print(f" –û–±–Ω–æ–≤–ª–µ–Ω remain_num –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {station.box_id}: {response.get('RemainNum', 0)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
            inventory_data = []
            for slot_data in response.get('Slots', []):
                slot_number = slot_data['Slot']
                terminal_id = slot_data['TerminalID']
                level = slot_data['Level']
                voltage = slot_data['Voltage']
                current = slot_data['Current']
                temperature = slot_data['Temperature']
                soh = slot_data['SOH']
                status = slot_data['Status']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–≤–µ—Ä–±–∞–Ω–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ powerbank
                powerbank = await Powerbank.get_by_serial(self.db_pool, terminal_id)

                if powerbank:
                    # –ü–æ–≤–µ—Ä–±–∞–Ω–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –∏ SOH
                    await powerbank.update_status_and_soh(self.db_pool, 'active', soh)
                    print(f"üì± –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–≤–µ—Ä–±–∞–Ω–∫ {terminal_id}: —Å—Ç–∞—Ç—É—Å 'active', SOH {soh}")
                else:
                    # –ü–æ–≤–µ—Ä–±–∞–Ω–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                    new_powerbank = await Powerbank.create(self.db_pool, station.org_unit_id, terminal_id, soh, 'active')
                    if new_powerbank:
                        print(f"üì± –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–≤–µ—Ä–±–∞–Ω–∫ {terminal_id} —Å SOH {soh}")
                    else:
                        print(f" –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–≤–µ—Ä–±–∞–Ω–∫ –¥–ª—è TerminalID {terminal_id}")

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                inventory_data.append({
                    'slot_number': slot_number,
                    'terminal_id': terminal_id,
                    'level': level,
                    'voltage': voltage,
                    'current': current,
                    'temperature': temperature,
                    'soh': soh,
                    'status': status
                })

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ –∫—ç—à —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connection.inventory_cache = {
                'slots_num': response.get('SlotsNum', 0),
                'remain_num': response.get('RemainNum', 0),
                'inventory': inventory_data,
                'last_update': datetime.now(timezone.utc).isoformat()
            }
            
            print(f" –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: {len(inventory_data)} —Å–ª–æ—Ç–æ–≤")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–∞–π–ª
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id} (ID: {connection.station_id}) | "
                           f"–°–ª–æ—Ç–æ–≤: {response.get('SlotsNum', 0)}, –°–≤–æ–±–æ–¥–Ω–æ: {response.get('RemainNum', 0)}, "
                           f"–ü–æ–≤–µ—Ä–±–∞–Ω–∫–æ–≤: {len(response.get('Slots', []))}")
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ {connection.box_id}: {e}")

    async def get_station_inventory(self, station_id: int) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ –∫—ç—à–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ —Å—Ç–∞–Ω—Ü–∏–µ–π
            connection = self.connection_manager.get_connection_by_station_id(station_id)
            if not connection:
                return {
                    "success": False,
                    "error": "–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—ç—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            if hasattr(connection, 'inventory_cache') and connection.inventory_cache:
                return {
                    "success": True,
                    "inventory": connection.inventory_cache
                }
            else:
                return {
                    "success": False,
                    "error": "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {str(e)}"
            }